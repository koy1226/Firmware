
GPIO_STEPMOTOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800374c  0800374c  0001374c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800385c  0800385c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003864  08003864  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800386c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000084  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000093e6  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018c4  00000000  00000000  00029492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c0  00000000  00000000  0002ad58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000728  00000000  00000000  0002b518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eeaf  00000000  00000000  0002bc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009295  00000000  00000000  0004aaef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b929c  00000000  00000000  00053d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010d020  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024f8  00000000  00000000  0010d070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003734 	.word	0x08003734

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08003734 	.word	0x08003734

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fb8c 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f814 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f89a 	bl	8000610 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004dc:	f000 f86e 	bl	80005bc <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (rotation_steps > 0) {
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <main+0x30>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	ddfb      	ble.n	80004e0 <main+0x14>
		  rotate_steps(rotation_steps); // 특정 스텝만큼 회전시키는 함수 호출
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <main+0x30>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 f94f 	bl	8000790 <rotate_steps>
		  rotation_steps = 0; // 추가 회전 없도록 스텝 다시 0으로 설정.
 80004f2:	4b02      	ldr	r3, [pc, #8]	; (80004fc <main+0x30>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
	  if (rotation_steps > 0) {
 80004f8:	e7f2      	b.n	80004e0 <main+0x14>
 80004fa:	bf00      	nop
 80004fc:	200000e4 	.word	0x200000e4

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f002 fc0a 	bl	8002d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <SystemClock_Config+0xb4>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a21      	ldr	r2, [pc, #132]	; (80005b4 <SystemClock_Config+0xb4>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <SystemClock_Config+0xb4>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <SystemClock_Config+0xb8>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <SystemClock_Config+0xb8>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <SystemClock_Config+0xb8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055c:	2302      	movs	r3, #2
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000564:	2310      	movs	r3, #16
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000568:	2300      	movs	r3, #0
 800056a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056c:	f107 0320 	add.w	r3, r7, #32
 8000570:	4618      	mov	r0, r3
 8000572:	f000 ff43 	bl	80013fc <HAL_RCC_OscConfig>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800057c:	f000 f9ac 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000580:	230f      	movs	r3, #15
 8000582:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000584:	2300      	movs	r3, #0
 8000586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f001 f9a6 	bl	80018ec <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005a6:	f000 f997 	bl	80008d8 <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	3750      	adds	r7, #80	; 0x50
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40007000 	.word	0x40007000

080005bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	; (800060c <MX_USART1_UART_Init+0x50>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_USART1_UART_Init+0x4c>)
 80005f4:	f001 fb5a 	bl	8001cac <HAL_UART_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005fe:	f000 f96b 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000098 	.word	0x20000098
 800060c:	40011000 	.word	0x40011000

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <MX_GPIO_Init+0xb8>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a26      	ldr	r2, [pc, #152]	; (80006c8 <MX_GPIO_Init+0xb8>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <MX_GPIO_Init+0xb8>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_GPIO_Init+0xb8>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a1f      	ldr	r2, [pc, #124]	; (80006c8 <MX_GPIO_Init+0xb8>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_GPIO_Init+0xb8>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	210f      	movs	r1, #15
 8000662:	481a      	ldr	r0, [pc, #104]	; (80006cc <MX_GPIO_Init+0xbc>)
 8000664:	f000 fe98 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	4619      	mov	r1, r3
 800067e:	4813      	ldr	r0, [pc, #76]	; (80006cc <MX_GPIO_Init+0xbc>)
 8000680:	f000 fcee 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000684:	23f0      	movs	r3, #240	; 0xf0
 8000686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000688:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800068c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	4619      	mov	r1, r3
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <MX_GPIO_Init+0xc0>)
 800069a:	f000 fce1 	bl	8001060 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	200a      	movs	r0, #10
 80006a4:	f000 fc13 	bl	8000ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80006a8:	200a      	movs	r0, #10
 80006aa:	f000 fc2c 	bl	8000f06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2017      	movs	r0, #23
 80006b4:	f000 fc0b 	bl	8000ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006b8:	2017      	movs	r0, #23
 80006ba:	f000 fc24 	bl	8000f06 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006be:	bf00      	nop
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020800 	.word	0x40020800
 80006d0:	40020000 	.word	0x40020000

080006d4 <set_motor_pins>:
/*
 주어진 패턴에 따라 특정 GPIO(General Purpose Input/Output) 핀 상태를 설정.
 8비트 정수 'pattern' 매개변수로 받아, 각 비트를 GPIO 핀의 상태로 매핑.
 각 비트는 특정 핀에 연결, 비트 값 1이면 해당 핀을 세트 상태(GPIO_PIN_SET), 0이면 리셋 상태(GPIO_PIN_RESET) 설정.
*/
void set_motor_pins(uint8_t pattern) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, (pattern & 0x01) ? GPIO_PIN_SET: GPIO_PIN_RESET);
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	461a      	mov	r2, r3
 80006e8:	2101      	movs	r1, #1
 80006ea:	4814      	ldr	r0, [pc, #80]	; (800073c <set_motor_pins+0x68>)
 80006ec:	f000 fe54 	bl	8001398 <HAL_GPIO_WritePin>
	//	'pattern' LSB(Least Significant Bit, 가장 낮은 비트) 1인지 0인지에 따라 핀 상태를 세트 또는 리셋.

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, (pattern & 0x02) ? GPIO_PIN_SET: GPIO_PIN_RESET);
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	105b      	asrs	r3, r3, #1
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	2102      	movs	r1, #2
 8000700:	480e      	ldr	r0, [pc, #56]	; (800073c <set_motor_pins+0x68>)
 8000702:	f000 fe49 	bl	8001398 <HAL_GPIO_WritePin>
	//	'pattern' 두 번째 LSB 1인지 0인지에 따라 핀 상태를 세트 또는 리셋.

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, (pattern & 0x04) ? GPIO_PIN_SET: GPIO_PIN_RESET);
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	109b      	asrs	r3, r3, #2
 800070a:	b2db      	uxtb	r3, r3
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	b2db      	uxtb	r3, r3
 8000712:	461a      	mov	r2, r3
 8000714:	2104      	movs	r1, #4
 8000716:	4809      	ldr	r0, [pc, #36]	; (800073c <set_motor_pins+0x68>)
 8000718:	f000 fe3e 	bl	8001398 <HAL_GPIO_WritePin>
	//	'pattern' 세 번째 LSB 1인지 0인지에 따라 핀 상태를 세트 또는 리셋.

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, (pattern & 0x08) ? GPIO_PIN_SET: GPIO_PIN_RESET);
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	10db      	asrs	r3, r3, #3
 8000720:	b2db      	uxtb	r3, r3
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	b2db      	uxtb	r3, r3
 8000728:	461a      	mov	r2, r3
 800072a:	2108      	movs	r1, #8
 800072c:	4803      	ldr	r0, [pc, #12]	; (800073c <set_motor_pins+0x68>)
 800072e:	f000 fe33 	bl	8001398 <HAL_GPIO_WritePin>
	//	'pattern' 네 번째 LSB 1인지 0인지에 따라 핀 상태를 세트 또는 리셋.
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40020800 	.word	0x40020800

08000740 <motor_wave_drive>:
모터 해상도 2배(단일상 200스텝 1바퀴, 1-2상 400스텝 1바퀴)

----------------------------------------------------------------------------------------------*/

// 1상
void motor_wave_drive() {
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
	current_pattern = WAVE_DRIVE_PATTERN;
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <motor_wave_drive+0x1c>)
 8000746:	4a06      	ldr	r2, [pc, #24]	; (8000760 <motor_wave_drive+0x20>)
 8000748:	601a      	str	r2, [r3, #0]
// 웨이브 드라이브 실행하는데 필요한 핀(또는 코일) 구성 나타내는 비트 패턴(일반적으로 상수 배열로 정의)
// 각 배열 요소 순차적으로 모터를 웨이브 드라이브 방식으로 돌리는데 사용.

current_pattern_length = sizeof(WAVE_DRIVE_PATTERN) / sizeof(uint8_t);
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <motor_wave_drive+0x24>)
 800074c:	2204      	movs	r2, #4
 800074e:	601a      	str	r2, [r3, #0]
//	패턴의 길이 계산하여 저장
//	패턴 배열의 총 요소 수 = 패턴 전체 바이트 크기 반환 / 한 요소의 바이트 크기
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	200000dc 	.word	0x200000dc
 8000760:	20000000 	.word	0x20000000
 8000764:	200000e0 	.word	0x200000e0

08000768 <motor_half_drive_ccw>:
	current_pattern = HALF_DRIVE_PATTERN;
	current_pattern_length = sizeof(HALF_DRIVE_PATTERN) / sizeof(uint8_t);
}

// 1-2상 반시계
void motor_half_drive_ccw() {
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
	current_pattern = HALF_DRIVE_PATTERN_CCW;
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <motor_half_drive_ccw+0x1c>)
 800076e:	4a06      	ldr	r2, [pc, #24]	; (8000788 <motor_half_drive_ccw+0x20>)
 8000770:	601a      	str	r2, [r3, #0]
	current_pattern_length = sizeof(HALF_DRIVE_PATTERN_CCW) / sizeof(uint8_t);
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <motor_half_drive_ccw+0x24>)
 8000774:	2208      	movs	r2, #8
 8000776:	601a      	str	r2, [r3, #0]
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	200000dc 	.word	0x200000dc
 8000788:	20000004 	.word	0x20000004
 800078c:	200000e0 	.word	0x200000e0

08000790 <rotate_steps>:

// 특정 스텝 수 만큼 스텝 모터 회전시키는 함수. 스텝 수 매개변수로 입력받아, 그 수만큼 모터 회전시킴.
void rotate_steps(int steps) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	// 매개면수로 받는 값만큼 반복, 원하는 스텝 수 만큼 모터 회전시키기 위함.
	for (int i = 0; i < steps; i++)	{
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	e014      	b.n	80007c8 <rotate_steps+0x38>
		set_motor_pins(current_pattern[i % current_pattern_length]);
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <rotate_steps+0x4c>)
 80007a0:	6819      	ldr	r1, [r3, #0]
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <rotate_steps+0x50>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	fb93 f0f2 	sdiv	r0, r3, r2
 80007ac:	fb00 f202 	mul.w	r2, r0, r2
 80007b0:	1a9b      	subs	r3, r3, r2
 80007b2:	440b      	add	r3, r1
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff8c 	bl	80006d4 <set_motor_pins>
		//1. 현재 설정된 패턴(current_pattern)의 i번째 핀 설정을 적용
		//2. i % current_pattern_length : 패턴 순환
		//ex) 패턴 길이 4, 스텝 5인 경우 나머지 1이므로 다시 첫번째 상태로 순환
		HAL_Delay(DELAY_BETWEEN_STEPS_MS);
 80007bc:	200a      	movs	r0, #10
 80007be:	f000 fa87 	bl	8000cd0 <HAL_Delay>
	for (int i = 0; i < steps; i++)	{
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	3301      	adds	r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	dbe6      	blt.n	800079e <rotate_steps+0xe>
	}
}
 80007d0:	bf00      	nop
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000dc 	.word	0x200000dc
 80007e0:	200000e0 	.word	0x200000e0

080007e4 <HAL_GPIO_EXTI_Callback>:

// 특정 GPIO 핀에 외부 인터럽트 발생할 때마다 자동 호출
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	80fb      	strh	r3, [r7, #6]
	// 외부 인터럽트 연결 확인 메시지 출력
	printf("HAL_GPIO_EXTI_Callback triggered!\r\n");
 80007ee:	481d      	ldr	r0, [pc, #116]	; (8000864 <HAL_GPIO_EXTI_Callback+0x80>)
 80007f0:	f002 fb10 	bl	8002e14 <puts>
	switch (GPIO_Pin) {
 80007f4:	88fb      	ldrh	r3, [r7, #6]
 80007f6:	2b80      	cmp	r3, #128	; 0x80
 80007f8:	d025      	beq.n	8000846 <HAL_GPIO_EXTI_Callback+0x62>
 80007fa:	2b80      	cmp	r3, #128	; 0x80
 80007fc:	dc2c      	bgt.n	8000858 <HAL_GPIO_EXTI_Callback+0x74>
 80007fe:	2b40      	cmp	r3, #64	; 0x40
 8000800:	d018      	beq.n	8000834 <HAL_GPIO_EXTI_Callback+0x50>
 8000802:	2b40      	cmp	r3, #64	; 0x40
 8000804:	dc28      	bgt.n	8000858 <HAL_GPIO_EXTI_Callback+0x74>
 8000806:	2b10      	cmp	r3, #16
 8000808:	d002      	beq.n	8000810 <HAL_GPIO_EXTI_Callback+0x2c>
 800080a:	2b20      	cmp	r3, #32
 800080c:	d009      	beq.n	8000822 <HAL_GPIO_EXTI_Callback+0x3e>
		rotation_steps = STEPS_PER_360_DEGREE * 2;
		// Since it is 1-2 phase, you need to do 1 or 2 phase step x 2.
		break;

	default:
		break;
 800080e:	e023      	b.n	8000858 <HAL_GPIO_EXTI_Callback+0x74>
		printf("Set rotation 90 degrees\r\n");
 8000810:	4815      	ldr	r0, [pc, #84]	; (8000868 <HAL_GPIO_EXTI_Callback+0x84>)
 8000812:	f002 faff 	bl	8002e14 <puts>
		motor_wave_drive();
 8000816:	f7ff ff93 	bl	8000740 <motor_wave_drive>
		rotation_steps = STEPS_PER_90_DEGREE;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <HAL_GPIO_EXTI_Callback+0x88>)
 800081c:	220c      	movs	r2, #12
 800081e:	601a      	str	r2, [r3, #0]
		break;
 8000820:	e01b      	b.n	800085a <HAL_GPIO_EXTI_Callback+0x76>
		printf("Set rotation 180 degrees\r\n");
 8000822:	4813      	ldr	r0, [pc, #76]	; (8000870 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000824:	f002 faf6 	bl	8002e14 <puts>
		motor_wave_drive();
 8000828:	f7ff ff8a 	bl	8000740 <motor_wave_drive>
		rotation_steps = STEPS_PER_180_DEGREE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_GPIO_EXTI_Callback+0x88>)
 800082e:	2218      	movs	r2, #24
 8000830:	601a      	str	r2, [r3, #0]
		break;
 8000832:	e012      	b.n	800085a <HAL_GPIO_EXTI_Callback+0x76>
		printf("Set rotation 360 degrees\r\n");
 8000834:	480f      	ldr	r0, [pc, #60]	; (8000874 <HAL_GPIO_EXTI_Callback+0x90>)
 8000836:	f002 faed 	bl	8002e14 <puts>
		motor_wave_drive();
 800083a:	f7ff ff81 	bl	8000740 <motor_wave_drive>
		rotation_steps = STEPS_PER_360_DEGREE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <HAL_GPIO_EXTI_Callback+0x88>)
 8000840:	2230      	movs	r2, #48	; 0x30
 8000842:	601a      	str	r2, [r3, #0]
		break;
 8000844:	e009      	b.n	800085a <HAL_GPIO_EXTI_Callback+0x76>
		printf("Set rotation CCW Direction\r\n");
 8000846:	480c      	ldr	r0, [pc, #48]	; (8000878 <HAL_GPIO_EXTI_Callback+0x94>)
 8000848:	f002 fae4 	bl	8002e14 <puts>
		motor_half_drive_ccw();
 800084c:	f7ff ff8c 	bl	8000768 <motor_half_drive_ccw>
		rotation_steps = STEPS_PER_360_DEGREE * 2;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_GPIO_EXTI_Callback+0x88>)
 8000852:	2260      	movs	r2, #96	; 0x60
 8000854:	601a      	str	r2, [r3, #0]
		break;
 8000856:	e000      	b.n	800085a <HAL_GPIO_EXTI_Callback+0x76>
		break;
 8000858:	bf00      	nop
	}
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	0800374c 	.word	0x0800374c
 8000868:	08003770 	.word	0x08003770
 800086c:	200000e4 	.word	0x200000e4
 8000870:	0800378c 	.word	0x0800378c
 8000874:	080037a8 	.word	0x080037a8
 8000878:	080037c4 	.word	0x080037c4

0800087c <__io_putchar>:
// UART(Universal Asynchronous Receiver/Transmitter) 데이터 전송 함수
int __io_putchar(int ch) // 단일 문자 ch 전송
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	//UART_HandleTypeDef huart1;
	HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0xFFFF);
 8000884:	1d39      	adds	r1, r7, #4
 8000886:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800088a:	2201      	movs	r2, #1
 800088c:	4803      	ldr	r0, [pc, #12]	; (800089c <__io_putchar+0x20>)
 800088e:	f001 fa5a 	bl	8001d46 <HAL_UART_Transmit>
	// (UART 핸들러, 전송할 데이터의 포인터, 전송할 데이터 크기(1바이트), 전송 시간 제한(최대값))
	return ch;
 8000892:	687b      	ldr	r3, [r7, #4]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000098 	.word	0x20000098

080008a0 <_write>:
// 문자열 전송(파일 디스크립터, 전송 문자열 시작 포인터, 전송 문자열 길이)
int _write(int file, char *ptr, int len) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	e009      	b.n	80008c6 <_write+0x26>
		__io_putchar(*ptr++); // 문자열의 각 문자 UART 전송
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	1c5a      	adds	r2, r3, #1
 80008b6:	60ba      	str	r2, [r7, #8]
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ffde 	bl	800087c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	3301      	adds	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	dbf1      	blt.n	80008b2 <_write+0x12>
	}
	return len; // 문자열의 모든 문자 전송 후, 전송한 문자 수(len) 반환
 80008ce:	687b      	ldr	r3, [r7, #4]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <HAL_MspInit+0x4c>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800

08000934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a1d      	ldr	r2, [pc, #116]	; (80009c8 <HAL_UART_MspInit+0x94>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d134      	bne.n	80009c0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <HAL_UART_MspInit+0x98>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <HAL_UART_MspInit+0x98>)
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <HAL_UART_MspInit+0x98>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f003 0310 	and.w	r3, r3, #16
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <HAL_UART_MspInit+0x98>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a14      	ldr	r2, [pc, #80]	; (80009cc <HAL_UART_MspInit+0x98>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_UART_MspInit+0x98>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800098e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009a0:	2307      	movs	r3, #7
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	4809      	ldr	r0, [pc, #36]	; (80009d0 <HAL_UART_MspInit+0x9c>)
 80009ac:	f000 fb58 	bl	8001060 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	2025      	movs	r0, #37	; 0x25
 80009b6:	f000 fa8a 	bl	8000ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009ba:	2025      	movs	r0, #37	; 0x25
 80009bc:	f000 faa3 	bl	8000f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40011000 	.word	0x40011000
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <NMI_Handler+0x4>

080009da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <MemManage_Handler+0x4>

080009e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a20:	f000 f936 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000a2c:	2010      	movs	r0, #16
 8000a2e:	f000 fccd 	bl	80013cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000a3a:	2020      	movs	r0, #32
 8000a3c:	f000 fcc6 	bl	80013cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000a40:	2040      	movs	r0, #64	; 0x40
 8000a42:	f000 fcc3 	bl	80013cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000a46:	2080      	movs	r0, #128	; 0x80
 8000a48:	f000 fcc0 	bl	80013cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <USART1_IRQHandler+0x10>)
 8000a56:	f001 fa09 	bl	8001e6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000098 	.word	0x20000098

08000a64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	e00a      	b.n	8000a8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a76:	f3af 8000 	nop.w
 8000a7a:	4601      	mov	r1, r0
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	1c5a      	adds	r2, r3, #1
 8000a80:	60ba      	str	r2, [r7, #8]
 8000a82:	b2ca      	uxtb	r2, r1
 8000a84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697a      	ldr	r2, [r7, #20]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dbf0      	blt.n	8000a76 <_read+0x12>
  }

  return len;
 8000a94:	687b      	ldr	r3, [r7, #4]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <_isatty>:

int _isatty(int file)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b10:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <_sbrk+0x5c>)
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <_sbrk+0x60>)
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <_sbrk+0x64>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <_sbrk+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d207      	bcs.n	8000b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b38:	f002 f8cc 	bl	8002cd4 <__errno>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	220c      	movs	r2, #12
 8000b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	e009      	b.n	8000b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <_sbrk+0x64>)
 8000b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20020000 	.word	0x20020000
 8000b68:	00000400 	.word	0x00000400
 8000b6c:	200000e8 	.word	0x200000e8
 8000b70:	20000100 	.word	0x20000100

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <SystemInit+0x20>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <SystemInit+0x20>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b9e:	490e      	ldr	r1, [pc, #56]	; (8000bd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba0:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb4:	4c0b      	ldr	r4, [pc, #44]	; (8000be4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bc2:	f7ff ffd7 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f002 f88b 	bl	8002ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bca:	f7ff fc7f 	bl	80004cc <main>
  bx  lr    
 8000bce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000bdc:	0800386c 	.word	0x0800386c
  ldr r2, =_sbss
 8000be0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000be4:	20000100 	.word	0x20000100

08000be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <HAL_Init+0x40>)
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_Init+0x40>)
 8000c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_Init+0x40>)
 8000c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f94f 	bl	8000eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f000 f808 	bl	8000c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fe60 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023c00 	.word	0x40023c00

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x54>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_InitTick+0x58>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f967 	bl	8000f22 <HAL_SYSTICK_Config>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00e      	b.n	8000c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	d80a      	bhi.n	8000c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c64:	2200      	movs	r2, #0
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f000 f92f 	bl	8000ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c70:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <HAL_InitTick+0x5c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e000      	b.n	8000c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2000000c 	.word	0x2000000c
 8000c88:	20000014 	.word	0x20000014
 8000c8c:	20000010 	.word	0x20000010

08000c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000014 	.word	0x20000014
 8000cb4:	200000ec 	.word	0x200000ec

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	200000ec 	.word	0x200000ec

08000cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff ffee 	bl	8000cb8 <HAL_GetTick>
 8000cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce8:	d005      	beq.n	8000cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_Delay+0x44>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cf6:	bf00      	nop
 8000cf8:	f7ff ffde 	bl	8000cb8 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_Delay+0x28>
  {
  }
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000014 	.word	0x20000014

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0b      	blt.n	8000da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f003 021f 	and.w	r2, r3, #31
 8000d94:	4907      	ldr	r1, [pc, #28]	; (8000db4 <__NVIC_EnableIRQ+0x38>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	095b      	lsrs	r3, r3, #5
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100

08000db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	db0a      	blt.n	8000de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	490c      	ldr	r1, [pc, #48]	; (8000e04 <__NVIC_SetPriority+0x4c>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	0112      	lsls	r2, r2, #4
 8000dd8:	b2d2      	uxtb	r2, r2
 8000dda:	440b      	add	r3, r1
 8000ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de0:	e00a      	b.n	8000df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4908      	ldr	r1, [pc, #32]	; (8000e08 <__NVIC_SetPriority+0x50>)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	3b04      	subs	r3, #4
 8000df0:	0112      	lsls	r2, r2, #4
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	440b      	add	r3, r1
 8000df6:	761a      	strb	r2, [r3, #24]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f1c3 0307 	rsb	r3, r3, #7
 8000e26:	2b04      	cmp	r3, #4
 8000e28:	bf28      	it	cs
 8000e2a:	2304      	movcs	r3, #4
 8000e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3304      	adds	r3, #4
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	d902      	bls.n	8000e3c <NVIC_EncodePriority+0x30>
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	e000      	b.n	8000e3e <NVIC_EncodePriority+0x32>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	f04f 32ff 	mov.w	r2, #4294967295
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	4313      	orrs	r3, r2
         );
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e84:	d301      	bcc.n	8000e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00f      	b.n	8000eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <SysTick_Config+0x40>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e92:	210f      	movs	r1, #15
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f7ff ff8e 	bl	8000db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <SysTick_Config+0x40>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <SysTick_Config+0x40>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	e000e010 	.word	0xe000e010

08000eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff29 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee0:	f7ff ff3e 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	6978      	ldr	r0, [r7, #20]
 8000eec:	f7ff ff8e 	bl	8000e0c <NVIC_EncodePriority>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff5d 	bl	8000db8 <__NVIC_SetPriority>
}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff31 	bl	8000d7c <__NVIC_EnableIRQ>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffa2 	bl	8000e74 <SysTick_Config>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f46:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff feb6 	bl	8000cb8 <HAL_GetTick>
 8000f4c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d008      	beq.n	8000f6c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2280      	movs	r2, #128	; 0x80
 8000f5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e052      	b.n	8001012 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0216 	bic.w	r2, r2, #22
 8000f7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	695a      	ldr	r2, [r3, #20]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f8a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d103      	bne.n	8000f9c <HAL_DMA_Abort+0x62>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d007      	beq.n	8000fac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0208 	bic.w	r2, r2, #8
 8000faa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0201 	bic.w	r2, r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fbc:	e013      	b.n	8000fe6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fbe:	f7ff fe7b 	bl	8000cb8 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b05      	cmp	r3, #5
 8000fca:	d90c      	bls.n	8000fe6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2220      	movs	r2, #32
 8000fd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e015      	b.n	8001012 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1e4      	bne.n	8000fbe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff8:	223f      	movs	r2, #63	; 0x3f
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d004      	beq.n	8001038 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2280      	movs	r2, #128	; 0x80
 8001032:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e00c      	b.n	8001052 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2205      	movs	r2, #5
 800103c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 0201 	bic.w	r2, r2, #1
 800104e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	e16b      	b.n	8001354 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	429a      	cmp	r2, r3
 8001096:	f040 815a 	bne.w	800134e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d005      	beq.n	80010b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d130      	bne.n	8001114 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e8:	2201      	movs	r2, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	f003 0201 	and.w	r2, r3, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b03      	cmp	r3, #3
 800111e:	d017      	beq.n	8001150 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d123      	bne.n	80011a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	08da      	lsrs	r2, r3, #3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3208      	adds	r2, #8
 8001164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	220f      	movs	r2, #15
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	691a      	ldr	r2, [r3, #16]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	08da      	lsrs	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3208      	adds	r2, #8
 800119e:	69b9      	ldr	r1, [r7, #24]
 80011a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0203 	and.w	r2, r3, #3
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80b4 	beq.w	800134e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b60      	ldr	r3, [pc, #384]	; (800136c <HAL_GPIO_Init+0x30c>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	4a5f      	ldr	r2, [pc, #380]	; (800136c <HAL_GPIO_Init+0x30c>)
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b5d      	ldr	r3, [pc, #372]	; (800136c <HAL_GPIO_Init+0x30c>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001202:	4a5b      	ldr	r2, [pc, #364]	; (8001370 <HAL_GPIO_Init+0x310>)
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	220f      	movs	r2, #15
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a52      	ldr	r2, [pc, #328]	; (8001374 <HAL_GPIO_Init+0x314>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d02b      	beq.n	8001286 <HAL_GPIO_Init+0x226>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a51      	ldr	r2, [pc, #324]	; (8001378 <HAL_GPIO_Init+0x318>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d025      	beq.n	8001282 <HAL_GPIO_Init+0x222>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a50      	ldr	r2, [pc, #320]	; (800137c <HAL_GPIO_Init+0x31c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d01f      	beq.n	800127e <HAL_GPIO_Init+0x21e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4f      	ldr	r2, [pc, #316]	; (8001380 <HAL_GPIO_Init+0x320>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d019      	beq.n	800127a <HAL_GPIO_Init+0x21a>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4e      	ldr	r2, [pc, #312]	; (8001384 <HAL_GPIO_Init+0x324>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d013      	beq.n	8001276 <HAL_GPIO_Init+0x216>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4d      	ldr	r2, [pc, #308]	; (8001388 <HAL_GPIO_Init+0x328>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d00d      	beq.n	8001272 <HAL_GPIO_Init+0x212>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4c      	ldr	r2, [pc, #304]	; (800138c <HAL_GPIO_Init+0x32c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d007      	beq.n	800126e <HAL_GPIO_Init+0x20e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4b      	ldr	r2, [pc, #300]	; (8001390 <HAL_GPIO_Init+0x330>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_GPIO_Init+0x20a>
 8001266:	2307      	movs	r3, #7
 8001268:	e00e      	b.n	8001288 <HAL_GPIO_Init+0x228>
 800126a:	2308      	movs	r3, #8
 800126c:	e00c      	b.n	8001288 <HAL_GPIO_Init+0x228>
 800126e:	2306      	movs	r3, #6
 8001270:	e00a      	b.n	8001288 <HAL_GPIO_Init+0x228>
 8001272:	2305      	movs	r3, #5
 8001274:	e008      	b.n	8001288 <HAL_GPIO_Init+0x228>
 8001276:	2304      	movs	r3, #4
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x228>
 800127a:	2303      	movs	r3, #3
 800127c:	e004      	b.n	8001288 <HAL_GPIO_Init+0x228>
 800127e:	2302      	movs	r3, #2
 8001280:	e002      	b.n	8001288 <HAL_GPIO_Init+0x228>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x228>
 8001286:	2300      	movs	r3, #0
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	f002 0203 	and.w	r2, r2, #3
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	4093      	lsls	r3, r2
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001298:	4935      	ldr	r1, [pc, #212]	; (8001370 <HAL_GPIO_Init+0x310>)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a6:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <HAL_GPIO_Init+0x334>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ca:	4a32      	ldr	r2, [pc, #200]	; (8001394 <HAL_GPIO_Init+0x334>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d0:	4b30      	ldr	r3, [pc, #192]	; (8001394 <HAL_GPIO_Init+0x334>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f4:	4a27      	ldr	r2, [pc, #156]	; (8001394 <HAL_GPIO_Init+0x334>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <HAL_GPIO_Init+0x334>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800131e:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <HAL_GPIO_Init+0x334>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <HAL_GPIO_Init+0x334>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001348:	4a12      	ldr	r2, [pc, #72]	; (8001394 <HAL_GPIO_Init+0x334>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3301      	adds	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b0f      	cmp	r3, #15
 8001358:	f67f ae90 	bls.w	800107c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	40013800 	.word	0x40013800
 8001374:	40020000 	.word	0x40020000
 8001378:	40020400 	.word	0x40020400
 800137c:	40020800 	.word	0x40020800
 8001380:	40020c00 	.word	0x40020c00
 8001384:	40021000 	.word	0x40021000
 8001388:	40021400 	.word	0x40021400
 800138c:	40021800 	.word	0x40021800
 8001390:	40021c00 	.word	0x40021c00
 8001394:	40013c00 	.word	0x40013c00

08001398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
 80013a4:	4613      	mov	r3, r2
 80013a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013b4:	e003      	b.n	80013be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	041a      	lsls	r2, r3, #16
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	619a      	str	r2, [r3, #24]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d8:	695a      	ldr	r2, [r3, #20]
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	4013      	ands	r3, r2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f9fa 	bl	80007e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40013c00 	.word	0x40013c00

080013fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e267      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d075      	beq.n	8001506 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800141a:	4b88      	ldr	r3, [pc, #544]	; (800163c <HAL_RCC_OscConfig+0x240>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b04      	cmp	r3, #4
 8001424:	d00c      	beq.n	8001440 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001426:	4b85      	ldr	r3, [pc, #532]	; (800163c <HAL_RCC_OscConfig+0x240>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800142e:	2b08      	cmp	r3, #8
 8001430:	d112      	bne.n	8001458 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001432:	4b82      	ldr	r3, [pc, #520]	; (800163c <HAL_RCC_OscConfig+0x240>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800143a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800143e:	d10b      	bne.n	8001458 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001440:	4b7e      	ldr	r3, [pc, #504]	; (800163c <HAL_RCC_OscConfig+0x240>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d05b      	beq.n	8001504 <HAL_RCC_OscConfig+0x108>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d157      	bne.n	8001504 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e242      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001460:	d106      	bne.n	8001470 <HAL_RCC_OscConfig+0x74>
 8001462:	4b76      	ldr	r3, [pc, #472]	; (800163c <HAL_RCC_OscConfig+0x240>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a75      	ldr	r2, [pc, #468]	; (800163c <HAL_RCC_OscConfig+0x240>)
 8001468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e01d      	b.n	80014ac <HAL_RCC_OscConfig+0xb0>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x98>
 800147a:	4b70      	ldr	r3, [pc, #448]	; (800163c <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6f      	ldr	r2, [pc, #444]	; (800163c <HAL_RCC_OscConfig+0x240>)
 8001480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b6d      	ldr	r3, [pc, #436]	; (800163c <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a6c      	ldr	r2, [pc, #432]	; (800163c <HAL_RCC_OscConfig+0x240>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e00b      	b.n	80014ac <HAL_RCC_OscConfig+0xb0>
 8001494:	4b69      	ldr	r3, [pc, #420]	; (800163c <HAL_RCC_OscConfig+0x240>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a68      	ldr	r2, [pc, #416]	; (800163c <HAL_RCC_OscConfig+0x240>)
 800149a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b66      	ldr	r3, [pc, #408]	; (800163c <HAL_RCC_OscConfig+0x240>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a65      	ldr	r2, [pc, #404]	; (800163c <HAL_RCC_OscConfig+0x240>)
 80014a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d013      	beq.n	80014dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fc00 	bl	8000cb8 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014bc:	f7ff fbfc 	bl	8000cb8 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b64      	cmp	r3, #100	; 0x64
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e207      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ce:	4b5b      	ldr	r3, [pc, #364]	; (800163c <HAL_RCC_OscConfig+0x240>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0xc0>
 80014da:	e014      	b.n	8001506 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fbec 	bl	8000cb8 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff fbe8 	bl	8000cb8 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	; 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e1f3      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f6:	4b51      	ldr	r3, [pc, #324]	; (800163c <HAL_RCC_OscConfig+0x240>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0xe8>
 8001502:	e000      	b.n	8001506 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d063      	beq.n	80015da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001512:	4b4a      	ldr	r3, [pc, #296]	; (800163c <HAL_RCC_OscConfig+0x240>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00b      	beq.n	8001536 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800151e:	4b47      	ldr	r3, [pc, #284]	; (800163c <HAL_RCC_OscConfig+0x240>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001526:	2b08      	cmp	r3, #8
 8001528:	d11c      	bne.n	8001564 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800152a:	4b44      	ldr	r3, [pc, #272]	; (800163c <HAL_RCC_OscConfig+0x240>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d116      	bne.n	8001564 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001536:	4b41      	ldr	r3, [pc, #260]	; (800163c <HAL_RCC_OscConfig+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <HAL_RCC_OscConfig+0x152>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d001      	beq.n	800154e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e1c7      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154e:	4b3b      	ldr	r3, [pc, #236]	; (800163c <HAL_RCC_OscConfig+0x240>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4937      	ldr	r1, [pc, #220]	; (800163c <HAL_RCC_OscConfig+0x240>)
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001562:	e03a      	b.n	80015da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d020      	beq.n	80015ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800156c:	4b34      	ldr	r3, [pc, #208]	; (8001640 <HAL_RCC_OscConfig+0x244>)
 800156e:	2201      	movs	r2, #1
 8001570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001572:	f7ff fba1 	bl	8000cb8 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800157a:	f7ff fb9d 	bl	8000cb8 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e1a8      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158c:	4b2b      	ldr	r3, [pc, #172]	; (800163c <HAL_RCC_OscConfig+0x240>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001598:	4b28      	ldr	r3, [pc, #160]	; (800163c <HAL_RCC_OscConfig+0x240>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4925      	ldr	r1, [pc, #148]	; (800163c <HAL_RCC_OscConfig+0x240>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	600b      	str	r3, [r1, #0]
 80015ac:	e015      	b.n	80015da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ae:	4b24      	ldr	r3, [pc, #144]	; (8001640 <HAL_RCC_OscConfig+0x244>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fb80 	bl	8000cb8 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015bc:	f7ff fb7c 	bl	8000cb8 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e187      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ce:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_RCC_OscConfig+0x240>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d036      	beq.n	8001654 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d016      	beq.n	800161c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_RCC_OscConfig+0x248>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f4:	f7ff fb60 	bl	8000cb8 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fc:	f7ff fb5c 	bl	8000cb8 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e167      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_RCC_OscConfig+0x240>)
 8001610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x200>
 800161a:	e01b      	b.n	8001654 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_RCC_OscConfig+0x248>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001622:	f7ff fb49 	bl	8000cb8 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001628:	e00e      	b.n	8001648 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800162a:	f7ff fb45 	bl	8000cb8 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d907      	bls.n	8001648 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e150      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
 800163c:	40023800 	.word	0x40023800
 8001640:	42470000 	.word	0x42470000
 8001644:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001648:	4b88      	ldr	r3, [pc, #544]	; (800186c <HAL_RCC_OscConfig+0x470>)
 800164a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1ea      	bne.n	800162a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 8097 	beq.w	8001790 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001666:	4b81      	ldr	r3, [pc, #516]	; (800186c <HAL_RCC_OscConfig+0x470>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10f      	bne.n	8001692 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	4b7d      	ldr	r3, [pc, #500]	; (800186c <HAL_RCC_OscConfig+0x470>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a7c      	ldr	r2, [pc, #496]	; (800186c <HAL_RCC_OscConfig+0x470>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b7a      	ldr	r3, [pc, #488]	; (800186c <HAL_RCC_OscConfig+0x470>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800168e:	2301      	movs	r3, #1
 8001690:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001692:	4b77      	ldr	r3, [pc, #476]	; (8001870 <HAL_RCC_OscConfig+0x474>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169a:	2b00      	cmp	r3, #0
 800169c:	d118      	bne.n	80016d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169e:	4b74      	ldr	r3, [pc, #464]	; (8001870 <HAL_RCC_OscConfig+0x474>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a73      	ldr	r2, [pc, #460]	; (8001870 <HAL_RCC_OscConfig+0x474>)
 80016a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016aa:	f7ff fb05 	bl	8000cb8 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b2:	f7ff fb01 	bl	8000cb8 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e10c      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c4:	4b6a      	ldr	r3, [pc, #424]	; (8001870 <HAL_RCC_OscConfig+0x474>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0f0      	beq.n	80016b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d106      	bne.n	80016e6 <HAL_RCC_OscConfig+0x2ea>
 80016d8:	4b64      	ldr	r3, [pc, #400]	; (800186c <HAL_RCC_OscConfig+0x470>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016dc:	4a63      	ldr	r2, [pc, #396]	; (800186c <HAL_RCC_OscConfig+0x470>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6713      	str	r3, [r2, #112]	; 0x70
 80016e4:	e01c      	b.n	8001720 <HAL_RCC_OscConfig+0x324>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b05      	cmp	r3, #5
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0x30c>
 80016ee:	4b5f      	ldr	r3, [pc, #380]	; (800186c <HAL_RCC_OscConfig+0x470>)
 80016f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f2:	4a5e      	ldr	r2, [pc, #376]	; (800186c <HAL_RCC_OscConfig+0x470>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	6713      	str	r3, [r2, #112]	; 0x70
 80016fa:	4b5c      	ldr	r3, [pc, #368]	; (800186c <HAL_RCC_OscConfig+0x470>)
 80016fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fe:	4a5b      	ldr	r2, [pc, #364]	; (800186c <HAL_RCC_OscConfig+0x470>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6713      	str	r3, [r2, #112]	; 0x70
 8001706:	e00b      	b.n	8001720 <HAL_RCC_OscConfig+0x324>
 8001708:	4b58      	ldr	r3, [pc, #352]	; (800186c <HAL_RCC_OscConfig+0x470>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170c:	4a57      	ldr	r2, [pc, #348]	; (800186c <HAL_RCC_OscConfig+0x470>)
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	6713      	str	r3, [r2, #112]	; 0x70
 8001714:	4b55      	ldr	r3, [pc, #340]	; (800186c <HAL_RCC_OscConfig+0x470>)
 8001716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001718:	4a54      	ldr	r2, [pc, #336]	; (800186c <HAL_RCC_OscConfig+0x470>)
 800171a:	f023 0304 	bic.w	r3, r3, #4
 800171e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d015      	beq.n	8001754 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001728:	f7ff fac6 	bl	8000cb8 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172e:	e00a      	b.n	8001746 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001730:	f7ff fac2 	bl	8000cb8 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	; 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e0cb      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001746:	4b49      	ldr	r3, [pc, #292]	; (800186c <HAL_RCC_OscConfig+0x470>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0ee      	beq.n	8001730 <HAL_RCC_OscConfig+0x334>
 8001752:	e014      	b.n	800177e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001754:	f7ff fab0 	bl	8000cb8 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175a:	e00a      	b.n	8001772 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175c:	f7ff faac 	bl	8000cb8 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e0b5      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001772:	4b3e      	ldr	r3, [pc, #248]	; (800186c <HAL_RCC_OscConfig+0x470>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1ee      	bne.n	800175c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800177e:	7dfb      	ldrb	r3, [r7, #23]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d105      	bne.n	8001790 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001784:	4b39      	ldr	r3, [pc, #228]	; (800186c <HAL_RCC_OscConfig+0x470>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	4a38      	ldr	r2, [pc, #224]	; (800186c <HAL_RCC_OscConfig+0x470>)
 800178a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800178e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 80a1 	beq.w	80018dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800179a:	4b34      	ldr	r3, [pc, #208]	; (800186c <HAL_RCC_OscConfig+0x470>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d05c      	beq.n	8001860 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d141      	bne.n	8001832 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ae:	4b31      	ldr	r3, [pc, #196]	; (8001874 <HAL_RCC_OscConfig+0x478>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fa80 	bl	8000cb8 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017bc:	f7ff fa7c 	bl	8000cb8 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e087      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ce:	4b27      	ldr	r3, [pc, #156]	; (800186c <HAL_RCC_OscConfig+0x470>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69da      	ldr	r2, [r3, #28]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	019b      	lsls	r3, r3, #6
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f0:	085b      	lsrs	r3, r3, #1
 80017f2:	3b01      	subs	r3, #1
 80017f4:	041b      	lsls	r3, r3, #16
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	061b      	lsls	r3, r3, #24
 80017fe:	491b      	ldr	r1, [pc, #108]	; (800186c <HAL_RCC_OscConfig+0x470>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <HAL_RCC_OscConfig+0x478>)
 8001806:	2201      	movs	r2, #1
 8001808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180a:	f7ff fa55 	bl	8000cb8 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001812:	f7ff fa51 	bl	8000cb8 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e05c      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_RCC_OscConfig+0x470>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x416>
 8001830:	e054      	b.n	80018dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <HAL_RCC_OscConfig+0x478>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff fa3e 	bl	8000cb8 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff fa3a 	bl	8000cb8 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e045      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_RCC_OscConfig+0x470>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x444>
 800185e:	e03d      	b.n	80018dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d107      	bne.n	8001878 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e038      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
 800186c:	40023800 	.word	0x40023800
 8001870:	40007000 	.word	0x40007000
 8001874:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_RCC_OscConfig+0x4ec>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d028      	beq.n	80018d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d121      	bne.n	80018d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d11a      	bne.n	80018d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018a8:	4013      	ands	r3, r2
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d111      	bne.n	80018d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018be:	085b      	lsrs	r3, r3, #1
 80018c0:	3b01      	subs	r3, #1
 80018c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d107      	bne.n	80018d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800

080018ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0cc      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001900:	4b68      	ldr	r3, [pc, #416]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d90c      	bls.n	8001928 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190e:	4b65      	ldr	r3, [pc, #404]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001916:	4b63      	ldr	r3, [pc, #396]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0b8      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d020      	beq.n	8001976 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001940:	4b59      	ldr	r3, [pc, #356]	; (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4a58      	ldr	r2, [pc, #352]	; (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800194a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001958:	4b53      	ldr	r3, [pc, #332]	; (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	4a52      	ldr	r2, [pc, #328]	; (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001962:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001964:	4b50      	ldr	r3, [pc, #320]	; (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	494d      	ldr	r1, [pc, #308]	; (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	4313      	orrs	r3, r2
 8001974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d044      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d119      	bne.n	80019ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e07f      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d003      	beq.n	80019aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019aa:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e06f      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ba:	4b3b      	ldr	r3, [pc, #236]	; (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e067      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ca:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f023 0203 	bic.w	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4934      	ldr	r1, [pc, #208]	; (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019dc:	f7ff f96c 	bl	8000cb8 <HAL_GetTick>
 80019e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e2:	e00a      	b.n	80019fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e4:	f7ff f968 	bl	8000cb8 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e04f      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fa:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 020c 	and.w	r2, r3, #12
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d1eb      	bne.n	80019e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d20c      	bcs.n	8001a34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e032      	b.n	8001a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	4916      	ldr	r1, [pc, #88]	; (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a5e:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	490e      	ldr	r1, [pc, #56]	; (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a72:	f000 f821 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8001a76:	4602      	mov	r2, r0
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	490a      	ldr	r1, [pc, #40]	; (8001aac <HAL_RCC_ClockConfig+0x1c0>)
 8001a84:	5ccb      	ldrb	r3, [r1, r3]
 8001a86:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8a:	4a09      	ldr	r2, [pc, #36]	; (8001ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff f8cc 	bl	8000c30 <HAL_InitTick>

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023c00 	.word	0x40023c00
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	080037e0 	.word	0x080037e0
 8001ab0:	2000000c 	.word	0x2000000c
 8001ab4:	20000010 	.word	0x20000010

08001ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001abc:	b090      	sub	sp, #64	; 0x40
 8001abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ac8:	2300      	movs	r3, #0
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ad0:	4b59      	ldr	r3, [pc, #356]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d00d      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0x40>
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	f200 80a1 	bhi.w	8001c24 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x34>
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d003      	beq.n	8001af2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aea:	e09b      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aec:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x184>)
 8001aee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001af0:	e09b      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001af2:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8001af4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001af6:	e098      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001af8:	4b4f      	ldr	r3, [pc, #316]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b00:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b02:	4b4d      	ldr	r3, [pc, #308]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d028      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0e:	4b4a      	ldr	r3, [pc, #296]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	099b      	lsrs	r3, r3, #6
 8001b14:	2200      	movs	r2, #0
 8001b16:	623b      	str	r3, [r7, #32]
 8001b18:	627a      	str	r2, [r7, #36]	; 0x24
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b20:	2100      	movs	r1, #0
 8001b22:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b24:	fb03 f201 	mul.w	r2, r3, r1
 8001b28:	2300      	movs	r3, #0
 8001b2a:	fb00 f303 	mul.w	r3, r0, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	4a43      	ldr	r2, [pc, #268]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b32:	fba0 1202 	umull	r1, r2, r0, r2
 8001b36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b38:	460a      	mov	r2, r1
 8001b3a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b3e:	4413      	add	r3, r2
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b44:	2200      	movs	r2, #0
 8001b46:	61bb      	str	r3, [r7, #24]
 8001b48:	61fa      	str	r2, [r7, #28]
 8001b4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b52:	f7fe fb39 	bl	80001c8 <__aeabi_uldivmod>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b5e:	e053      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b60:	4b35      	ldr	r3, [pc, #212]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	099b      	lsrs	r3, r3, #6
 8001b66:	2200      	movs	r2, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	617a      	str	r2, [r7, #20]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b72:	f04f 0b00 	mov.w	fp, #0
 8001b76:	4652      	mov	r2, sl
 8001b78:	465b      	mov	r3, fp
 8001b7a:	f04f 0000 	mov.w	r0, #0
 8001b7e:	f04f 0100 	mov.w	r1, #0
 8001b82:	0159      	lsls	r1, r3, #5
 8001b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b88:	0150      	lsls	r0, r2, #5
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	ebb2 080a 	subs.w	r8, r2, sl
 8001b92:	eb63 090b 	sbc.w	r9, r3, fp
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ba2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ba6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001baa:	ebb2 0408 	subs.w	r4, r2, r8
 8001bae:	eb63 0509 	sbc.w	r5, r3, r9
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	00eb      	lsls	r3, r5, #3
 8001bbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bc0:	00e2      	lsls	r2, r4, #3
 8001bc2:	4614      	mov	r4, r2
 8001bc4:	461d      	mov	r5, r3
 8001bc6:	eb14 030a 	adds.w	r3, r4, sl
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	eb45 030b 	adc.w	r3, r5, fp
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bde:	4629      	mov	r1, r5
 8001be0:	028b      	lsls	r3, r1, #10
 8001be2:	4621      	mov	r1, r4
 8001be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001be8:	4621      	mov	r1, r4
 8001bea:	028a      	lsls	r2, r1, #10
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	60fa      	str	r2, [r7, #12]
 8001bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bfc:	f7fe fae4 	bl	80001c8 <__aeabi_uldivmod>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4613      	mov	r3, r2
 8001c06:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	0c1b      	lsrs	r3, r3, #16
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	3301      	adds	r3, #1
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001c18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c22:	e002      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x184>)
 8001c26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3740      	adds	r7, #64	; 0x40
 8001c30:	46bd      	mov	sp, r7
 8001c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	00f42400 	.word	0x00f42400
 8001c40:	017d7840 	.word	0x017d7840

08001c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	2000000c 	.word	0x2000000c

08001c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c60:	f7ff fff0 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	0a9b      	lsrs	r3, r3, #10
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	4903      	ldr	r1, [pc, #12]	; (8001c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	080037f0 	.word	0x080037f0

08001c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c88:	f7ff ffdc 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	0b5b      	lsrs	r3, r3, #13
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	4903      	ldr	r1, [pc, #12]	; (8001ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	080037f0 	.word	0x080037f0

08001cac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e03f      	b.n	8001d3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d106      	bne.n	8001cd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7fe fe2e 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2224      	movs	r2, #36	; 0x24
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fd7b 	bl	80027ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	695a      	ldr	r2, [r3, #20]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b08a      	sub	sp, #40	; 0x28
 8001d4a:	af02      	add	r7, sp, #8
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	603b      	str	r3, [r7, #0]
 8001d52:	4613      	mov	r3, r2
 8001d54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	d17c      	bne.n	8001e60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <HAL_UART_Transmit+0x2c>
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e075      	b.n	8001e62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_UART_Transmit+0x3e>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e06e      	b.n	8001e62 <HAL_UART_Transmit+0x11c>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2221      	movs	r2, #33	; 0x21
 8001d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d9a:	f7fe ff8d 	bl	8000cb8 <HAL_GetTick>
 8001d9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	88fa      	ldrh	r2, [r7, #6]
 8001da4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	88fa      	ldrh	r2, [r7, #6]
 8001daa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db4:	d108      	bne.n	8001dc8 <HAL_UART_Transmit+0x82>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d104      	bne.n	8001dc8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	e003      	b.n	8001dd0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001dd8:	e02a      	b.n	8001e30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2200      	movs	r2, #0
 8001de2:	2180      	movs	r1, #128	; 0x80
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 faf9 	bl	80023dc <UART_WaitOnFlagUntilTimeout>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e036      	b.n	8001e62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10b      	bne.n	8001e12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	61bb      	str	r3, [r7, #24]
 8001e10:	e007      	b.n	8001e22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	781a      	ldrb	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1cf      	bne.n	8001dda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2200      	movs	r2, #0
 8001e42:	2140      	movs	r1, #64	; 0x40
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 fac9 	bl	80023dc <UART_WaitOnFlagUntilTimeout>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e006      	b.n	8001e62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2220      	movs	r2, #32
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	e000      	b.n	8001e62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e60:	2302      	movs	r3, #2
  }
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3720      	adds	r7, #32
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b0ba      	sub	sp, #232	; 0xe8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001eaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10f      	bne.n	8001ed2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eb6:	f003 0320 	and.w	r3, r3, #32
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d009      	beq.n	8001ed2 <HAL_UART_IRQHandler+0x66>
 8001ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fbd3 	bl	8002676 <UART_Receive_IT>
      return;
 8001ed0:	e256      	b.n	8002380 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001ed2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 80de 	beq.w	8002098 <HAL_UART_IRQHandler+0x22c>
 8001edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d106      	bne.n	8001ef6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001eec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80d1 	beq.w	8002098 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00b      	beq.n	8001f1a <HAL_UART_IRQHandler+0xae>
 8001f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f043 0201 	orr.w	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00b      	beq.n	8001f3e <HAL_UART_IRQHandler+0xd2>
 8001f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f043 0202 	orr.w	r2, r3, #2
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00b      	beq.n	8001f62 <HAL_UART_IRQHandler+0xf6>
 8001f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f043 0204 	orr.w	r2, r3, #4
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d011      	beq.n	8001f92 <HAL_UART_IRQHandler+0x126>
 8001f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d105      	bne.n	8001f86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f043 0208 	orr.w	r2, r3, #8
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 81ed 	beq.w	8002376 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fa0:	f003 0320 	and.w	r3, r3, #32
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d008      	beq.n	8001fba <HAL_UART_IRQHandler+0x14e>
 8001fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fac:	f003 0320 	and.w	r3, r3, #32
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 fb5e 	bl	8002676 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc4:	2b40      	cmp	r3, #64	; 0x40
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d103      	bne.n	8001fe6 <HAL_UART_IRQHandler+0x17a>
 8001fde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d04f      	beq.n	8002086 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fa66 	bl	80024b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff6:	2b40      	cmp	r3, #64	; 0x40
 8001ff8:	d141      	bne.n	800207e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	3314      	adds	r3, #20
 8002000:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002004:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002008:	e853 3f00 	ldrex	r3, [r3]
 800200c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002010:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002018:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3314      	adds	r3, #20
 8002022:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002026:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800202a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800202e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002032:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002036:	e841 2300 	strex	r3, r2, [r1]
 800203a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800203e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1d9      	bne.n	8001ffa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204a:	2b00      	cmp	r3, #0
 800204c:	d013      	beq.n	8002076 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002052:	4a7d      	ldr	r2, [pc, #500]	; (8002248 <HAL_UART_IRQHandler+0x3dc>)
 8002054:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe ffdd 	bl	800101a <HAL_DMA_Abort_IT>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d016      	beq.n	8002094 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002070:	4610      	mov	r0, r2
 8002072:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002074:	e00e      	b.n	8002094 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f99a 	bl	80023b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800207c:	e00a      	b.n	8002094 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f996 	bl	80023b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002084:	e006      	b.n	8002094 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f992 	bl	80023b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002092:	e170      	b.n	8002376 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002094:	bf00      	nop
    return;
 8002096:	e16e      	b.n	8002376 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	2b01      	cmp	r3, #1
 800209e:	f040 814a 	bne.w	8002336 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80020a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 8143 	beq.w	8002336 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80020b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 813c 	beq.w	8002336 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020de:	2b40      	cmp	r3, #64	; 0x40
 80020e0:	f040 80b4 	bne.w	800224c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80020f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 8140 	beq.w	800237a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80020fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002102:	429a      	cmp	r2, r3
 8002104:	f080 8139 	bcs.w	800237a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800210e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800211a:	f000 8088 	beq.w	800222e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	330c      	adds	r3, #12
 8002124:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002128:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800212c:	e853 3f00 	ldrex	r3, [r3]
 8002130:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800213c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	330c      	adds	r3, #12
 8002146:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800214a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800214e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002152:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002156:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800215a:	e841 2300 	strex	r3, r2, [r1]
 800215e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002162:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1d9      	bne.n	800211e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	3314      	adds	r3, #20
 8002170:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002174:	e853 3f00 	ldrex	r3, [r3]
 8002178:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800217a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	3314      	adds	r3, #20
 800218a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800218e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002192:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002194:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002196:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800219a:	e841 2300 	strex	r3, r2, [r1]
 800219e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80021a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1e1      	bne.n	800216a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	3314      	adds	r3, #20
 80021ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021b0:	e853 3f00 	ldrex	r3, [r3]
 80021b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80021b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	3314      	adds	r3, #20
 80021c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80021ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80021cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80021d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021d2:	e841 2300 	strex	r3, r2, [r1]
 80021d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80021d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1e3      	bne.n	80021a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	330c      	adds	r3, #12
 80021f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021f6:	e853 3f00 	ldrex	r3, [r3]
 80021fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80021fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021fe:	f023 0310 	bic.w	r3, r3, #16
 8002202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	330c      	adds	r3, #12
 800220c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002210:	65ba      	str	r2, [r7, #88]	; 0x58
 8002212:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002214:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002216:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002218:	e841 2300 	strex	r3, r2, [r1]
 800221c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800221e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1e3      	bne.n	80021ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe fe86 	bl	8000f3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002236:	b29b      	uxth	r3, r3
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	b29b      	uxth	r3, r3
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f8c0 	bl	80023c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002244:	e099      	b.n	800237a <HAL_UART_IRQHandler+0x50e>
 8002246:	bf00      	nop
 8002248:	0800257f 	.word	0x0800257f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002254:	b29b      	uxth	r3, r3
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 808b 	beq.w	800237e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8086 	beq.w	800237e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	330c      	adds	r3, #12
 8002278:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800227a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227c:	e853 3f00 	ldrex	r3, [r3]
 8002280:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002284:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002288:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	330c      	adds	r3, #12
 8002292:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002296:	647a      	str	r2, [r7, #68]	; 0x44
 8002298:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800229a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800229c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800229e:	e841 2300 	strex	r3, r2, [r1]
 80022a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80022a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1e3      	bne.n	8002272 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	3314      	adds	r3, #20
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	e853 3f00 	ldrex	r3, [r3]
 80022b8:	623b      	str	r3, [r7, #32]
   return(result);
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	f023 0301 	bic.w	r3, r3, #1
 80022c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	3314      	adds	r3, #20
 80022ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80022ce:	633a      	str	r2, [r7, #48]	; 0x30
 80022d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022d6:	e841 2300 	strex	r3, r2, [r1]
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80022dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1e3      	bne.n	80022aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	330c      	adds	r3, #12
 80022f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	e853 3f00 	ldrex	r3, [r3]
 80022fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f023 0310 	bic.w	r3, r3, #16
 8002306:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	330c      	adds	r3, #12
 8002310:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002314:	61fa      	str	r2, [r7, #28]
 8002316:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002318:	69b9      	ldr	r1, [r7, #24]
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	e841 2300 	strex	r3, r2, [r1]
 8002320:	617b      	str	r3, [r7, #20]
   return(result);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1e3      	bne.n	80022f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002328:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800232c:	4619      	mov	r1, r3
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f848 	bl	80023c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002334:	e023      	b.n	800237e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800233a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <HAL_UART_IRQHandler+0x4ea>
 8002342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f929 	bl	80025a6 <UART_Transmit_IT>
    return;
 8002354:	e014      	b.n	8002380 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800235a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00e      	beq.n	8002380 <HAL_UART_IRQHandler+0x514>
 8002362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f969 	bl	8002646 <UART_EndTransmit_IT>
    return;
 8002374:	e004      	b.n	8002380 <HAL_UART_IRQHandler+0x514>
    return;
 8002376:	bf00      	nop
 8002378:	e002      	b.n	8002380 <HAL_UART_IRQHandler+0x514>
      return;
 800237a:	bf00      	nop
 800237c:	e000      	b.n	8002380 <HAL_UART_IRQHandler+0x514>
      return;
 800237e:	bf00      	nop
  }
}
 8002380:	37e8      	adds	r7, #232	; 0xe8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop

08002388 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b090      	sub	sp, #64	; 0x40
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	4613      	mov	r3, r2
 80023ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023ec:	e050      	b.n	8002490 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f4:	d04c      	beq.n	8002490 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <UART_WaitOnFlagUntilTimeout+0x30>
 80023fc:	f7fe fc5c 	bl	8000cb8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002408:	429a      	cmp	r2, r3
 800240a:	d241      	bcs.n	8002490 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	330c      	adds	r3, #12
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	e853 3f00 	ldrex	r3, [r3]
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	330c      	adds	r3, #12
 800242a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800242c:	637a      	str	r2, [r7, #52]	; 0x34
 800242e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002430:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002434:	e841 2300 	strex	r3, r2, [r1]
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e5      	bne.n	800240c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3314      	adds	r3, #20
 8002446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	e853 3f00 	ldrex	r3, [r3]
 800244e:	613b      	str	r3, [r7, #16]
   return(result);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	63bb      	str	r3, [r7, #56]	; 0x38
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	3314      	adds	r3, #20
 800245e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002460:	623a      	str	r2, [r7, #32]
 8002462:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002464:	69f9      	ldr	r1, [r7, #28]
 8002466:	6a3a      	ldr	r2, [r7, #32]
 8002468:	e841 2300 	strex	r3, r2, [r1]
 800246c:	61bb      	str	r3, [r7, #24]
   return(result);
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1e5      	bne.n	8002440 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e00f      	b.n	80024b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	4013      	ands	r3, r2
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	429a      	cmp	r2, r3
 800249e:	bf0c      	ite	eq
 80024a0:	2301      	moveq	r3, #1
 80024a2:	2300      	movne	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d09f      	beq.n	80023ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3740      	adds	r7, #64	; 0x40
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b095      	sub	sp, #84	; 0x54
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	330c      	adds	r3, #12
 80024c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ca:	e853 3f00 	ldrex	r3, [r3]
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80024d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	330c      	adds	r3, #12
 80024de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024e0:	643a      	str	r2, [r7, #64]	; 0x40
 80024e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80024e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024e8:	e841 2300 	strex	r3, r2, [r1]
 80024ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80024ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1e5      	bne.n	80024c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3314      	adds	r3, #20
 80024fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	e853 3f00 	ldrex	r3, [r3]
 8002502:	61fb      	str	r3, [r7, #28]
   return(result);
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f023 0301 	bic.w	r3, r3, #1
 800250a:	64bb      	str	r3, [r7, #72]	; 0x48
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3314      	adds	r3, #20
 8002512:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002514:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800251a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251c:	e841 2300 	strex	r3, r2, [r1]
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1e5      	bne.n	80024f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	2b01      	cmp	r3, #1
 800252e:	d119      	bne.n	8002564 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	330c      	adds	r3, #12
 8002536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	e853 3f00 	ldrex	r3, [r3]
 800253e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f023 0310 	bic.w	r3, r3, #16
 8002546:	647b      	str	r3, [r7, #68]	; 0x44
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	330c      	adds	r3, #12
 800254e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002550:	61ba      	str	r2, [r7, #24]
 8002552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002554:	6979      	ldr	r1, [r7, #20]
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	e841 2300 	strex	r3, r2, [r1]
 800255c:	613b      	str	r3, [r7, #16]
   return(result);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1e5      	bne.n	8002530 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002572:	bf00      	nop
 8002574:	3754      	adds	r7, #84	; 0x54
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7ff ff09 	bl	80023b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b21      	cmp	r3, #33	; 0x21
 80025b8:	d13e      	bne.n	8002638 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c2:	d114      	bne.n	80025ee <UART_Transmit_IT+0x48>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d110      	bne.n	80025ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	1c9a      	adds	r2, r3, #2
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	621a      	str	r2, [r3, #32]
 80025ec:	e008      	b.n	8002600 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	1c59      	adds	r1, r3, #1
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6211      	str	r1, [r2, #32]
 80025f8:	781a      	ldrb	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29b      	uxth	r3, r3
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	4619      	mov	r1, r3
 800260e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10f      	bne.n	8002634 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002622:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002632:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	e000      	b.n	800263a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002638:	2302      	movs	r3, #2
  }
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800265c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2220      	movs	r2, #32
 8002662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff fe8e 	bl	8002388 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b08c      	sub	sp, #48	; 0x30
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b22      	cmp	r3, #34	; 0x22
 8002688:	f040 80ab 	bne.w	80027e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002694:	d117      	bne.n	80026c6 <UART_Receive_IT+0x50>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d113      	bne.n	80026c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	1c9a      	adds	r2, r3, #2
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	629a      	str	r2, [r3, #40]	; 0x28
 80026c4:	e026      	b.n	8002714 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d8:	d007      	beq.n	80026ea <UART_Receive_IT+0x74>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10a      	bne.n	80026f8 <UART_Receive_IT+0x82>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f4:	701a      	strb	r2, [r3, #0]
 80026f6:	e008      	b.n	800270a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002704:	b2da      	uxtb	r2, r3
 8002706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002708:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b01      	subs	r3, #1
 800271c:	b29b      	uxth	r3, r3
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	4619      	mov	r1, r3
 8002722:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002724:	2b00      	cmp	r3, #0
 8002726:	d15a      	bne.n	80027de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0220 	bic.w	r2, r2, #32
 8002736:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002746:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	2b01      	cmp	r3, #1
 8002766:	d135      	bne.n	80027d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	330c      	adds	r3, #12
 8002774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	e853 3f00 	ldrex	r3, [r3]
 800277c:	613b      	str	r3, [r7, #16]
   return(result);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f023 0310 	bic.w	r3, r3, #16
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	330c      	adds	r3, #12
 800278c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278e:	623a      	str	r2, [r7, #32]
 8002790:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002792:	69f9      	ldr	r1, [r7, #28]
 8002794:	6a3a      	ldr	r2, [r7, #32]
 8002796:	e841 2300 	strex	r3, r2, [r1]
 800279a:	61bb      	str	r3, [r7, #24]
   return(result);
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e5      	bne.n	800276e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b10      	cmp	r3, #16
 80027ae:	d10a      	bne.n	80027c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027ca:	4619      	mov	r1, r3
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff fdf9 	bl	80023c4 <HAL_UARTEx_RxEventCallback>
 80027d2:	e002      	b.n	80027da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff fde1 	bl	800239c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e002      	b.n	80027e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
  }
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3730      	adds	r7, #48	; 0x30
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f0:	b0c0      	sub	sp, #256	; 0x100
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002808:	68d9      	ldr	r1, [r3, #12]
 800280a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	ea40 0301 	orr.w	r3, r0, r1
 8002814:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	431a      	orrs	r2, r3
 8002824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	431a      	orrs	r2, r3
 800282c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002844:	f021 010c 	bic.w	r1, r1, #12
 8002848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002852:	430b      	orrs	r3, r1
 8002854:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002866:	6999      	ldr	r1, [r3, #24]
 8002868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	ea40 0301 	orr.w	r3, r0, r1
 8002872:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b8f      	ldr	r3, [pc, #572]	; (8002ab8 <UART_SetConfig+0x2cc>)
 800287c:	429a      	cmp	r2, r3
 800287e:	d005      	beq.n	800288c <UART_SetConfig+0xa0>
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4b8d      	ldr	r3, [pc, #564]	; (8002abc <UART_SetConfig+0x2d0>)
 8002888:	429a      	cmp	r2, r3
 800288a:	d104      	bne.n	8002896 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800288c:	f7ff f9fa 	bl	8001c84 <HAL_RCC_GetPCLK2Freq>
 8002890:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002894:	e003      	b.n	800289e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002896:	f7ff f9e1 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 800289a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800289e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028a8:	f040 810c 	bne.w	8002ac4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028b0:	2200      	movs	r2, #0
 80028b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80028b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80028ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80028be:	4622      	mov	r2, r4
 80028c0:	462b      	mov	r3, r5
 80028c2:	1891      	adds	r1, r2, r2
 80028c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80028c6:	415b      	adcs	r3, r3
 80028c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028ce:	4621      	mov	r1, r4
 80028d0:	eb12 0801 	adds.w	r8, r2, r1
 80028d4:	4629      	mov	r1, r5
 80028d6:	eb43 0901 	adc.w	r9, r3, r1
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ee:	4690      	mov	r8, r2
 80028f0:	4699      	mov	r9, r3
 80028f2:	4623      	mov	r3, r4
 80028f4:	eb18 0303 	adds.w	r3, r8, r3
 80028f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028fc:	462b      	mov	r3, r5
 80028fe:	eb49 0303 	adc.w	r3, r9, r3
 8002902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002912:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002916:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800291a:	460b      	mov	r3, r1
 800291c:	18db      	adds	r3, r3, r3
 800291e:	653b      	str	r3, [r7, #80]	; 0x50
 8002920:	4613      	mov	r3, r2
 8002922:	eb42 0303 	adc.w	r3, r2, r3
 8002926:	657b      	str	r3, [r7, #84]	; 0x54
 8002928:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800292c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002930:	f7fd fc4a 	bl	80001c8 <__aeabi_uldivmod>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4b61      	ldr	r3, [pc, #388]	; (8002ac0 <UART_SetConfig+0x2d4>)
 800293a:	fba3 2302 	umull	r2, r3, r3, r2
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	011c      	lsls	r4, r3, #4
 8002942:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002946:	2200      	movs	r2, #0
 8002948:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800294c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002950:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002954:	4642      	mov	r2, r8
 8002956:	464b      	mov	r3, r9
 8002958:	1891      	adds	r1, r2, r2
 800295a:	64b9      	str	r1, [r7, #72]	; 0x48
 800295c:	415b      	adcs	r3, r3
 800295e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002960:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002964:	4641      	mov	r1, r8
 8002966:	eb12 0a01 	adds.w	sl, r2, r1
 800296a:	4649      	mov	r1, r9
 800296c:	eb43 0b01 	adc.w	fp, r3, r1
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800297c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002980:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002984:	4692      	mov	sl, r2
 8002986:	469b      	mov	fp, r3
 8002988:	4643      	mov	r3, r8
 800298a:	eb1a 0303 	adds.w	r3, sl, r3
 800298e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002992:	464b      	mov	r3, r9
 8002994:	eb4b 0303 	adc.w	r3, fp, r3
 8002998:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800299c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80029ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80029b0:	460b      	mov	r3, r1
 80029b2:	18db      	adds	r3, r3, r3
 80029b4:	643b      	str	r3, [r7, #64]	; 0x40
 80029b6:	4613      	mov	r3, r2
 80029b8:	eb42 0303 	adc.w	r3, r2, r3
 80029bc:	647b      	str	r3, [r7, #68]	; 0x44
 80029be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80029c6:	f7fd fbff 	bl	80001c8 <__aeabi_uldivmod>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4611      	mov	r1, r2
 80029d0:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <UART_SetConfig+0x2d4>)
 80029d2:	fba3 2301 	umull	r2, r3, r3, r1
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	2264      	movs	r2, #100	; 0x64
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	1acb      	subs	r3, r1, r3
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80029e6:	4b36      	ldr	r3, [pc, #216]	; (8002ac0 <UART_SetConfig+0x2d4>)
 80029e8:	fba3 2302 	umull	r2, r3, r3, r2
 80029ec:	095b      	lsrs	r3, r3, #5
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029f4:	441c      	add	r4, r3
 80029f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029fa:	2200      	movs	r2, #0
 80029fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a08:	4642      	mov	r2, r8
 8002a0a:	464b      	mov	r3, r9
 8002a0c:	1891      	adds	r1, r2, r2
 8002a0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a10:	415b      	adcs	r3, r3
 8002a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a18:	4641      	mov	r1, r8
 8002a1a:	1851      	adds	r1, r2, r1
 8002a1c:	6339      	str	r1, [r7, #48]	; 0x30
 8002a1e:	4649      	mov	r1, r9
 8002a20:	414b      	adcs	r3, r1
 8002a22:	637b      	str	r3, [r7, #52]	; 0x34
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a30:	4659      	mov	r1, fp
 8002a32:	00cb      	lsls	r3, r1, #3
 8002a34:	4651      	mov	r1, sl
 8002a36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a3a:	4651      	mov	r1, sl
 8002a3c:	00ca      	lsls	r2, r1, #3
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	4603      	mov	r3, r0
 8002a44:	4642      	mov	r2, r8
 8002a46:	189b      	adds	r3, r3, r2
 8002a48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a4c:	464b      	mov	r3, r9
 8002a4e:	460a      	mov	r2, r1
 8002a50:	eb42 0303 	adc.w	r3, r2, r3
 8002a54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	18db      	adds	r3, r3, r3
 8002a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a72:	4613      	mov	r3, r2
 8002a74:	eb42 0303 	adc.w	r3, r2, r3
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a82:	f7fd fba1 	bl	80001c8 <__aeabi_uldivmod>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <UART_SetConfig+0x2d4>)
 8002a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	2164      	movs	r1, #100	; 0x64
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	3332      	adds	r3, #50	; 0x32
 8002a9e:	4a08      	ldr	r2, [pc, #32]	; (8002ac0 <UART_SetConfig+0x2d4>)
 8002aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	f003 0207 	and.w	r2, r3, #7
 8002aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4422      	add	r2, r4
 8002ab2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ab4:	e105      	b.n	8002cc2 <UART_SetConfig+0x4d6>
 8002ab6:	bf00      	nop
 8002ab8:	40011000 	.word	0x40011000
 8002abc:	40011400 	.word	0x40011400
 8002ac0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ace:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002ad2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ad6:	4642      	mov	r2, r8
 8002ad8:	464b      	mov	r3, r9
 8002ada:	1891      	adds	r1, r2, r2
 8002adc:	6239      	str	r1, [r7, #32]
 8002ade:	415b      	adcs	r3, r3
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ae6:	4641      	mov	r1, r8
 8002ae8:	1854      	adds	r4, r2, r1
 8002aea:	4649      	mov	r1, r9
 8002aec:	eb43 0501 	adc.w	r5, r3, r1
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	00eb      	lsls	r3, r5, #3
 8002afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002afe:	00e2      	lsls	r2, r4, #3
 8002b00:	4614      	mov	r4, r2
 8002b02:	461d      	mov	r5, r3
 8002b04:	4643      	mov	r3, r8
 8002b06:	18e3      	adds	r3, r4, r3
 8002b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b0c:	464b      	mov	r3, r9
 8002b0e:	eb45 0303 	adc.w	r3, r5, r3
 8002b12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b32:	4629      	mov	r1, r5
 8002b34:	008b      	lsls	r3, r1, #2
 8002b36:	4621      	mov	r1, r4
 8002b38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	008a      	lsls	r2, r1, #2
 8002b40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b44:	f7fd fb40 	bl	80001c8 <__aeabi_uldivmod>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4b60      	ldr	r3, [pc, #384]	; (8002cd0 <UART_SetConfig+0x4e4>)
 8002b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	011c      	lsls	r4, r3, #4
 8002b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b68:	4642      	mov	r2, r8
 8002b6a:	464b      	mov	r3, r9
 8002b6c:	1891      	adds	r1, r2, r2
 8002b6e:	61b9      	str	r1, [r7, #24]
 8002b70:	415b      	adcs	r3, r3
 8002b72:	61fb      	str	r3, [r7, #28]
 8002b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b78:	4641      	mov	r1, r8
 8002b7a:	1851      	adds	r1, r2, r1
 8002b7c:	6139      	str	r1, [r7, #16]
 8002b7e:	4649      	mov	r1, r9
 8002b80:	414b      	adcs	r3, r1
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b90:	4659      	mov	r1, fp
 8002b92:	00cb      	lsls	r3, r1, #3
 8002b94:	4651      	mov	r1, sl
 8002b96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b9a:	4651      	mov	r1, sl
 8002b9c:	00ca      	lsls	r2, r1, #3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4642      	mov	r2, r8
 8002ba6:	189b      	adds	r3, r3, r2
 8002ba8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bac:	464b      	mov	r3, r9
 8002bae:	460a      	mov	r2, r1
 8002bb0:	eb42 0303 	adc.w	r3, r2, r3
 8002bb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002bd0:	4649      	mov	r1, r9
 8002bd2:	008b      	lsls	r3, r1, #2
 8002bd4:	4641      	mov	r1, r8
 8002bd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bda:	4641      	mov	r1, r8
 8002bdc:	008a      	lsls	r2, r1, #2
 8002bde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002be2:	f7fd faf1 	bl	80001c8 <__aeabi_uldivmod>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4b39      	ldr	r3, [pc, #228]	; (8002cd0 <UART_SetConfig+0x4e4>)
 8002bec:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	2164      	movs	r1, #100	; 0x64
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	3332      	adds	r3, #50	; 0x32
 8002bfe:	4a34      	ldr	r2, [pc, #208]	; (8002cd0 <UART_SetConfig+0x4e4>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c0a:	441c      	add	r4, r3
 8002c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c10:	2200      	movs	r2, #0
 8002c12:	673b      	str	r3, [r7, #112]	; 0x70
 8002c14:	677a      	str	r2, [r7, #116]	; 0x74
 8002c16:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c1a:	4642      	mov	r2, r8
 8002c1c:	464b      	mov	r3, r9
 8002c1e:	1891      	adds	r1, r2, r2
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	415b      	adcs	r3, r3
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c2a:	4641      	mov	r1, r8
 8002c2c:	1851      	adds	r1, r2, r1
 8002c2e:	6039      	str	r1, [r7, #0]
 8002c30:	4649      	mov	r1, r9
 8002c32:	414b      	adcs	r3, r1
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c42:	4659      	mov	r1, fp
 8002c44:	00cb      	lsls	r3, r1, #3
 8002c46:	4651      	mov	r1, sl
 8002c48:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c4c:	4651      	mov	r1, sl
 8002c4e:	00ca      	lsls	r2, r1, #3
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	4603      	mov	r3, r0
 8002c56:	4642      	mov	r2, r8
 8002c58:	189b      	adds	r3, r3, r2
 8002c5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c5c:	464b      	mov	r3, r9
 8002c5e:	460a      	mov	r2, r1
 8002c60:	eb42 0303 	adc.w	r3, r2, r3
 8002c64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	663b      	str	r3, [r7, #96]	; 0x60
 8002c70:	667a      	str	r2, [r7, #100]	; 0x64
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c7e:	4649      	mov	r1, r9
 8002c80:	008b      	lsls	r3, r1, #2
 8002c82:	4641      	mov	r1, r8
 8002c84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c88:	4641      	mov	r1, r8
 8002c8a:	008a      	lsls	r2, r1, #2
 8002c8c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c90:	f7fd fa9a 	bl	80001c8 <__aeabi_uldivmod>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <UART_SetConfig+0x4e4>)
 8002c9a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	2164      	movs	r1, #100	; 0x64
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	3332      	adds	r3, #50	; 0x32
 8002cac:	4a08      	ldr	r2, [pc, #32]	; (8002cd0 <UART_SetConfig+0x4e4>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	f003 020f 	and.w	r2, r3, #15
 8002cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4422      	add	r2, r4
 8002cc0:	609a      	str	r2, [r3, #8]
}
 8002cc2:	bf00      	nop
 8002cc4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cce:	bf00      	nop
 8002cd0:	51eb851f 	.word	0x51eb851f

08002cd4 <__errno>:
 8002cd4:	4b01      	ldr	r3, [pc, #4]	; (8002cdc <__errno+0x8>)
 8002cd6:	6818      	ldr	r0, [r3, #0]
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20000018 	.word	0x20000018

08002ce0 <__libc_init_array>:
 8002ce0:	b570      	push	{r4, r5, r6, lr}
 8002ce2:	4d0d      	ldr	r5, [pc, #52]	; (8002d18 <__libc_init_array+0x38>)
 8002ce4:	4c0d      	ldr	r4, [pc, #52]	; (8002d1c <__libc_init_array+0x3c>)
 8002ce6:	1b64      	subs	r4, r4, r5
 8002ce8:	10a4      	asrs	r4, r4, #2
 8002cea:	2600      	movs	r6, #0
 8002cec:	42a6      	cmp	r6, r4
 8002cee:	d109      	bne.n	8002d04 <__libc_init_array+0x24>
 8002cf0:	4d0b      	ldr	r5, [pc, #44]	; (8002d20 <__libc_init_array+0x40>)
 8002cf2:	4c0c      	ldr	r4, [pc, #48]	; (8002d24 <__libc_init_array+0x44>)
 8002cf4:	f000 fd1e 	bl	8003734 <_init>
 8002cf8:	1b64      	subs	r4, r4, r5
 8002cfa:	10a4      	asrs	r4, r4, #2
 8002cfc:	2600      	movs	r6, #0
 8002cfe:	42a6      	cmp	r6, r4
 8002d00:	d105      	bne.n	8002d0e <__libc_init_array+0x2e>
 8002d02:	bd70      	pop	{r4, r5, r6, pc}
 8002d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d08:	4798      	blx	r3
 8002d0a:	3601      	adds	r6, #1
 8002d0c:	e7ee      	b.n	8002cec <__libc_init_array+0xc>
 8002d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d12:	4798      	blx	r3
 8002d14:	3601      	adds	r6, #1
 8002d16:	e7f2      	b.n	8002cfe <__libc_init_array+0x1e>
 8002d18:	08003864 	.word	0x08003864
 8002d1c:	08003864 	.word	0x08003864
 8002d20:	08003864 	.word	0x08003864
 8002d24:	08003868 	.word	0x08003868

08002d28 <memset>:
 8002d28:	4402      	add	r2, r0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d100      	bne.n	8002d32 <memset+0xa>
 8002d30:	4770      	bx	lr
 8002d32:	f803 1b01 	strb.w	r1, [r3], #1
 8002d36:	e7f9      	b.n	8002d2c <memset+0x4>

08002d38 <_puts_r>:
 8002d38:	b570      	push	{r4, r5, r6, lr}
 8002d3a:	460e      	mov	r6, r1
 8002d3c:	4605      	mov	r5, r0
 8002d3e:	b118      	cbz	r0, 8002d48 <_puts_r+0x10>
 8002d40:	6983      	ldr	r3, [r0, #24]
 8002d42:	b90b      	cbnz	r3, 8002d48 <_puts_r+0x10>
 8002d44:	f000 fa48 	bl	80031d8 <__sinit>
 8002d48:	69ab      	ldr	r3, [r5, #24]
 8002d4a:	68ac      	ldr	r4, [r5, #8]
 8002d4c:	b913      	cbnz	r3, 8002d54 <_puts_r+0x1c>
 8002d4e:	4628      	mov	r0, r5
 8002d50:	f000 fa42 	bl	80031d8 <__sinit>
 8002d54:	4b2c      	ldr	r3, [pc, #176]	; (8002e08 <_puts_r+0xd0>)
 8002d56:	429c      	cmp	r4, r3
 8002d58:	d120      	bne.n	8002d9c <_puts_r+0x64>
 8002d5a:	686c      	ldr	r4, [r5, #4]
 8002d5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d5e:	07db      	lsls	r3, r3, #31
 8002d60:	d405      	bmi.n	8002d6e <_puts_r+0x36>
 8002d62:	89a3      	ldrh	r3, [r4, #12]
 8002d64:	0598      	lsls	r0, r3, #22
 8002d66:	d402      	bmi.n	8002d6e <_puts_r+0x36>
 8002d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d6a:	f000 fad3 	bl	8003314 <__retarget_lock_acquire_recursive>
 8002d6e:	89a3      	ldrh	r3, [r4, #12]
 8002d70:	0719      	lsls	r1, r3, #28
 8002d72:	d51d      	bpl.n	8002db0 <_puts_r+0x78>
 8002d74:	6923      	ldr	r3, [r4, #16]
 8002d76:	b1db      	cbz	r3, 8002db0 <_puts_r+0x78>
 8002d78:	3e01      	subs	r6, #1
 8002d7a:	68a3      	ldr	r3, [r4, #8]
 8002d7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d80:	3b01      	subs	r3, #1
 8002d82:	60a3      	str	r3, [r4, #8]
 8002d84:	bb39      	cbnz	r1, 8002dd6 <_puts_r+0x9e>
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	da38      	bge.n	8002dfc <_puts_r+0xc4>
 8002d8a:	4622      	mov	r2, r4
 8002d8c:	210a      	movs	r1, #10
 8002d8e:	4628      	mov	r0, r5
 8002d90:	f000 f848 	bl	8002e24 <__swbuf_r>
 8002d94:	3001      	adds	r0, #1
 8002d96:	d011      	beq.n	8002dbc <_puts_r+0x84>
 8002d98:	250a      	movs	r5, #10
 8002d9a:	e011      	b.n	8002dc0 <_puts_r+0x88>
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <_puts_r+0xd4>)
 8002d9e:	429c      	cmp	r4, r3
 8002da0:	d101      	bne.n	8002da6 <_puts_r+0x6e>
 8002da2:	68ac      	ldr	r4, [r5, #8]
 8002da4:	e7da      	b.n	8002d5c <_puts_r+0x24>
 8002da6:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <_puts_r+0xd8>)
 8002da8:	429c      	cmp	r4, r3
 8002daa:	bf08      	it	eq
 8002dac:	68ec      	ldreq	r4, [r5, #12]
 8002dae:	e7d5      	b.n	8002d5c <_puts_r+0x24>
 8002db0:	4621      	mov	r1, r4
 8002db2:	4628      	mov	r0, r5
 8002db4:	f000 f888 	bl	8002ec8 <__swsetup_r>
 8002db8:	2800      	cmp	r0, #0
 8002dba:	d0dd      	beq.n	8002d78 <_puts_r+0x40>
 8002dbc:	f04f 35ff 	mov.w	r5, #4294967295
 8002dc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dc2:	07da      	lsls	r2, r3, #31
 8002dc4:	d405      	bmi.n	8002dd2 <_puts_r+0x9a>
 8002dc6:	89a3      	ldrh	r3, [r4, #12]
 8002dc8:	059b      	lsls	r3, r3, #22
 8002dca:	d402      	bmi.n	8002dd2 <_puts_r+0x9a>
 8002dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dce:	f000 faa2 	bl	8003316 <__retarget_lock_release_recursive>
 8002dd2:	4628      	mov	r0, r5
 8002dd4:	bd70      	pop	{r4, r5, r6, pc}
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	da04      	bge.n	8002de4 <_puts_r+0xac>
 8002dda:	69a2      	ldr	r2, [r4, #24]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	dc06      	bgt.n	8002dee <_puts_r+0xb6>
 8002de0:	290a      	cmp	r1, #10
 8002de2:	d004      	beq.n	8002dee <_puts_r+0xb6>
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	6022      	str	r2, [r4, #0]
 8002dea:	7019      	strb	r1, [r3, #0]
 8002dec:	e7c5      	b.n	8002d7a <_puts_r+0x42>
 8002dee:	4622      	mov	r2, r4
 8002df0:	4628      	mov	r0, r5
 8002df2:	f000 f817 	bl	8002e24 <__swbuf_r>
 8002df6:	3001      	adds	r0, #1
 8002df8:	d1bf      	bne.n	8002d7a <_puts_r+0x42>
 8002dfa:	e7df      	b.n	8002dbc <_puts_r+0x84>
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	250a      	movs	r5, #10
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	6022      	str	r2, [r4, #0]
 8002e04:	701d      	strb	r5, [r3, #0]
 8002e06:	e7db      	b.n	8002dc0 <_puts_r+0x88>
 8002e08:	0800381c 	.word	0x0800381c
 8002e0c:	0800383c 	.word	0x0800383c
 8002e10:	080037fc 	.word	0x080037fc

08002e14 <puts>:
 8002e14:	4b02      	ldr	r3, [pc, #8]	; (8002e20 <puts+0xc>)
 8002e16:	4601      	mov	r1, r0
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	f7ff bf8d 	b.w	8002d38 <_puts_r>
 8002e1e:	bf00      	nop
 8002e20:	20000018 	.word	0x20000018

08002e24 <__swbuf_r>:
 8002e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e26:	460e      	mov	r6, r1
 8002e28:	4614      	mov	r4, r2
 8002e2a:	4605      	mov	r5, r0
 8002e2c:	b118      	cbz	r0, 8002e36 <__swbuf_r+0x12>
 8002e2e:	6983      	ldr	r3, [r0, #24]
 8002e30:	b90b      	cbnz	r3, 8002e36 <__swbuf_r+0x12>
 8002e32:	f000 f9d1 	bl	80031d8 <__sinit>
 8002e36:	4b21      	ldr	r3, [pc, #132]	; (8002ebc <__swbuf_r+0x98>)
 8002e38:	429c      	cmp	r4, r3
 8002e3a:	d12b      	bne.n	8002e94 <__swbuf_r+0x70>
 8002e3c:	686c      	ldr	r4, [r5, #4]
 8002e3e:	69a3      	ldr	r3, [r4, #24]
 8002e40:	60a3      	str	r3, [r4, #8]
 8002e42:	89a3      	ldrh	r3, [r4, #12]
 8002e44:	071a      	lsls	r2, r3, #28
 8002e46:	d52f      	bpl.n	8002ea8 <__swbuf_r+0x84>
 8002e48:	6923      	ldr	r3, [r4, #16]
 8002e4a:	b36b      	cbz	r3, 8002ea8 <__swbuf_r+0x84>
 8002e4c:	6923      	ldr	r3, [r4, #16]
 8002e4e:	6820      	ldr	r0, [r4, #0]
 8002e50:	1ac0      	subs	r0, r0, r3
 8002e52:	6963      	ldr	r3, [r4, #20]
 8002e54:	b2f6      	uxtb	r6, r6
 8002e56:	4283      	cmp	r3, r0
 8002e58:	4637      	mov	r7, r6
 8002e5a:	dc04      	bgt.n	8002e66 <__swbuf_r+0x42>
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	4628      	mov	r0, r5
 8002e60:	f000 f926 	bl	80030b0 <_fflush_r>
 8002e64:	bb30      	cbnz	r0, 8002eb4 <__swbuf_r+0x90>
 8002e66:	68a3      	ldr	r3, [r4, #8]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	60a3      	str	r3, [r4, #8]
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	6022      	str	r2, [r4, #0]
 8002e72:	701e      	strb	r6, [r3, #0]
 8002e74:	6963      	ldr	r3, [r4, #20]
 8002e76:	3001      	adds	r0, #1
 8002e78:	4283      	cmp	r3, r0
 8002e7a:	d004      	beq.n	8002e86 <__swbuf_r+0x62>
 8002e7c:	89a3      	ldrh	r3, [r4, #12]
 8002e7e:	07db      	lsls	r3, r3, #31
 8002e80:	d506      	bpl.n	8002e90 <__swbuf_r+0x6c>
 8002e82:	2e0a      	cmp	r6, #10
 8002e84:	d104      	bne.n	8002e90 <__swbuf_r+0x6c>
 8002e86:	4621      	mov	r1, r4
 8002e88:	4628      	mov	r0, r5
 8002e8a:	f000 f911 	bl	80030b0 <_fflush_r>
 8002e8e:	b988      	cbnz	r0, 8002eb4 <__swbuf_r+0x90>
 8002e90:	4638      	mov	r0, r7
 8002e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e94:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <__swbuf_r+0x9c>)
 8002e96:	429c      	cmp	r4, r3
 8002e98:	d101      	bne.n	8002e9e <__swbuf_r+0x7a>
 8002e9a:	68ac      	ldr	r4, [r5, #8]
 8002e9c:	e7cf      	b.n	8002e3e <__swbuf_r+0x1a>
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <__swbuf_r+0xa0>)
 8002ea0:	429c      	cmp	r4, r3
 8002ea2:	bf08      	it	eq
 8002ea4:	68ec      	ldreq	r4, [r5, #12]
 8002ea6:	e7ca      	b.n	8002e3e <__swbuf_r+0x1a>
 8002ea8:	4621      	mov	r1, r4
 8002eaa:	4628      	mov	r0, r5
 8002eac:	f000 f80c 	bl	8002ec8 <__swsetup_r>
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	d0cb      	beq.n	8002e4c <__swbuf_r+0x28>
 8002eb4:	f04f 37ff 	mov.w	r7, #4294967295
 8002eb8:	e7ea      	b.n	8002e90 <__swbuf_r+0x6c>
 8002eba:	bf00      	nop
 8002ebc:	0800381c 	.word	0x0800381c
 8002ec0:	0800383c 	.word	0x0800383c
 8002ec4:	080037fc 	.word	0x080037fc

08002ec8 <__swsetup_r>:
 8002ec8:	4b32      	ldr	r3, [pc, #200]	; (8002f94 <__swsetup_r+0xcc>)
 8002eca:	b570      	push	{r4, r5, r6, lr}
 8002ecc:	681d      	ldr	r5, [r3, #0]
 8002ece:	4606      	mov	r6, r0
 8002ed0:	460c      	mov	r4, r1
 8002ed2:	b125      	cbz	r5, 8002ede <__swsetup_r+0x16>
 8002ed4:	69ab      	ldr	r3, [r5, #24]
 8002ed6:	b913      	cbnz	r3, 8002ede <__swsetup_r+0x16>
 8002ed8:	4628      	mov	r0, r5
 8002eda:	f000 f97d 	bl	80031d8 <__sinit>
 8002ede:	4b2e      	ldr	r3, [pc, #184]	; (8002f98 <__swsetup_r+0xd0>)
 8002ee0:	429c      	cmp	r4, r3
 8002ee2:	d10f      	bne.n	8002f04 <__swsetup_r+0x3c>
 8002ee4:	686c      	ldr	r4, [r5, #4]
 8002ee6:	89a3      	ldrh	r3, [r4, #12]
 8002ee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002eec:	0719      	lsls	r1, r3, #28
 8002eee:	d42c      	bmi.n	8002f4a <__swsetup_r+0x82>
 8002ef0:	06dd      	lsls	r5, r3, #27
 8002ef2:	d411      	bmi.n	8002f18 <__swsetup_r+0x50>
 8002ef4:	2309      	movs	r3, #9
 8002ef6:	6033      	str	r3, [r6, #0]
 8002ef8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002efc:	81a3      	strh	r3, [r4, #12]
 8002efe:	f04f 30ff 	mov.w	r0, #4294967295
 8002f02:	e03e      	b.n	8002f82 <__swsetup_r+0xba>
 8002f04:	4b25      	ldr	r3, [pc, #148]	; (8002f9c <__swsetup_r+0xd4>)
 8002f06:	429c      	cmp	r4, r3
 8002f08:	d101      	bne.n	8002f0e <__swsetup_r+0x46>
 8002f0a:	68ac      	ldr	r4, [r5, #8]
 8002f0c:	e7eb      	b.n	8002ee6 <__swsetup_r+0x1e>
 8002f0e:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <__swsetup_r+0xd8>)
 8002f10:	429c      	cmp	r4, r3
 8002f12:	bf08      	it	eq
 8002f14:	68ec      	ldreq	r4, [r5, #12]
 8002f16:	e7e6      	b.n	8002ee6 <__swsetup_r+0x1e>
 8002f18:	0758      	lsls	r0, r3, #29
 8002f1a:	d512      	bpl.n	8002f42 <__swsetup_r+0x7a>
 8002f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f1e:	b141      	cbz	r1, 8002f32 <__swsetup_r+0x6a>
 8002f20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f24:	4299      	cmp	r1, r3
 8002f26:	d002      	beq.n	8002f2e <__swsetup_r+0x66>
 8002f28:	4630      	mov	r0, r6
 8002f2a:	f000 fa5b 	bl	80033e4 <_free_r>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	6363      	str	r3, [r4, #52]	; 0x34
 8002f32:	89a3      	ldrh	r3, [r4, #12]
 8002f34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002f38:	81a3      	strh	r3, [r4, #12]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	6063      	str	r3, [r4, #4]
 8002f3e:	6923      	ldr	r3, [r4, #16]
 8002f40:	6023      	str	r3, [r4, #0]
 8002f42:	89a3      	ldrh	r3, [r4, #12]
 8002f44:	f043 0308 	orr.w	r3, r3, #8
 8002f48:	81a3      	strh	r3, [r4, #12]
 8002f4a:	6923      	ldr	r3, [r4, #16]
 8002f4c:	b94b      	cbnz	r3, 8002f62 <__swsetup_r+0x9a>
 8002f4e:	89a3      	ldrh	r3, [r4, #12]
 8002f50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f58:	d003      	beq.n	8002f62 <__swsetup_r+0x9a>
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	4630      	mov	r0, r6
 8002f5e:	f000 fa01 	bl	8003364 <__smakebuf_r>
 8002f62:	89a0      	ldrh	r0, [r4, #12]
 8002f64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f68:	f010 0301 	ands.w	r3, r0, #1
 8002f6c:	d00a      	beq.n	8002f84 <__swsetup_r+0xbc>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60a3      	str	r3, [r4, #8]
 8002f72:	6963      	ldr	r3, [r4, #20]
 8002f74:	425b      	negs	r3, r3
 8002f76:	61a3      	str	r3, [r4, #24]
 8002f78:	6923      	ldr	r3, [r4, #16]
 8002f7a:	b943      	cbnz	r3, 8002f8e <__swsetup_r+0xc6>
 8002f7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f80:	d1ba      	bne.n	8002ef8 <__swsetup_r+0x30>
 8002f82:	bd70      	pop	{r4, r5, r6, pc}
 8002f84:	0781      	lsls	r1, r0, #30
 8002f86:	bf58      	it	pl
 8002f88:	6963      	ldrpl	r3, [r4, #20]
 8002f8a:	60a3      	str	r3, [r4, #8]
 8002f8c:	e7f4      	b.n	8002f78 <__swsetup_r+0xb0>
 8002f8e:	2000      	movs	r0, #0
 8002f90:	e7f7      	b.n	8002f82 <__swsetup_r+0xba>
 8002f92:	bf00      	nop
 8002f94:	20000018 	.word	0x20000018
 8002f98:	0800381c 	.word	0x0800381c
 8002f9c:	0800383c 	.word	0x0800383c
 8002fa0:	080037fc 	.word	0x080037fc

08002fa4 <__sflush_r>:
 8002fa4:	898a      	ldrh	r2, [r1, #12]
 8002fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002faa:	4605      	mov	r5, r0
 8002fac:	0710      	lsls	r0, r2, #28
 8002fae:	460c      	mov	r4, r1
 8002fb0:	d458      	bmi.n	8003064 <__sflush_r+0xc0>
 8002fb2:	684b      	ldr	r3, [r1, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	dc05      	bgt.n	8002fc4 <__sflush_r+0x20>
 8002fb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	dc02      	bgt.n	8002fc4 <__sflush_r+0x20>
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fc6:	2e00      	cmp	r6, #0
 8002fc8:	d0f9      	beq.n	8002fbe <__sflush_r+0x1a>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002fd0:	682f      	ldr	r7, [r5, #0]
 8002fd2:	602b      	str	r3, [r5, #0]
 8002fd4:	d032      	beq.n	800303c <__sflush_r+0x98>
 8002fd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fd8:	89a3      	ldrh	r3, [r4, #12]
 8002fda:	075a      	lsls	r2, r3, #29
 8002fdc:	d505      	bpl.n	8002fea <__sflush_r+0x46>
 8002fde:	6863      	ldr	r3, [r4, #4]
 8002fe0:	1ac0      	subs	r0, r0, r3
 8002fe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fe4:	b10b      	cbz	r3, 8002fea <__sflush_r+0x46>
 8002fe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fe8:	1ac0      	subs	r0, r0, r3
 8002fea:	2300      	movs	r3, #0
 8002fec:	4602      	mov	r2, r0
 8002fee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ff0:	6a21      	ldr	r1, [r4, #32]
 8002ff2:	4628      	mov	r0, r5
 8002ff4:	47b0      	blx	r6
 8002ff6:	1c43      	adds	r3, r0, #1
 8002ff8:	89a3      	ldrh	r3, [r4, #12]
 8002ffa:	d106      	bne.n	800300a <__sflush_r+0x66>
 8002ffc:	6829      	ldr	r1, [r5, #0]
 8002ffe:	291d      	cmp	r1, #29
 8003000:	d82c      	bhi.n	800305c <__sflush_r+0xb8>
 8003002:	4a2a      	ldr	r2, [pc, #168]	; (80030ac <__sflush_r+0x108>)
 8003004:	40ca      	lsrs	r2, r1
 8003006:	07d6      	lsls	r6, r2, #31
 8003008:	d528      	bpl.n	800305c <__sflush_r+0xb8>
 800300a:	2200      	movs	r2, #0
 800300c:	6062      	str	r2, [r4, #4]
 800300e:	04d9      	lsls	r1, r3, #19
 8003010:	6922      	ldr	r2, [r4, #16]
 8003012:	6022      	str	r2, [r4, #0]
 8003014:	d504      	bpl.n	8003020 <__sflush_r+0x7c>
 8003016:	1c42      	adds	r2, r0, #1
 8003018:	d101      	bne.n	800301e <__sflush_r+0x7a>
 800301a:	682b      	ldr	r3, [r5, #0]
 800301c:	b903      	cbnz	r3, 8003020 <__sflush_r+0x7c>
 800301e:	6560      	str	r0, [r4, #84]	; 0x54
 8003020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003022:	602f      	str	r7, [r5, #0]
 8003024:	2900      	cmp	r1, #0
 8003026:	d0ca      	beq.n	8002fbe <__sflush_r+0x1a>
 8003028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800302c:	4299      	cmp	r1, r3
 800302e:	d002      	beq.n	8003036 <__sflush_r+0x92>
 8003030:	4628      	mov	r0, r5
 8003032:	f000 f9d7 	bl	80033e4 <_free_r>
 8003036:	2000      	movs	r0, #0
 8003038:	6360      	str	r0, [r4, #52]	; 0x34
 800303a:	e7c1      	b.n	8002fc0 <__sflush_r+0x1c>
 800303c:	6a21      	ldr	r1, [r4, #32]
 800303e:	2301      	movs	r3, #1
 8003040:	4628      	mov	r0, r5
 8003042:	47b0      	blx	r6
 8003044:	1c41      	adds	r1, r0, #1
 8003046:	d1c7      	bne.n	8002fd8 <__sflush_r+0x34>
 8003048:	682b      	ldr	r3, [r5, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0c4      	beq.n	8002fd8 <__sflush_r+0x34>
 800304e:	2b1d      	cmp	r3, #29
 8003050:	d001      	beq.n	8003056 <__sflush_r+0xb2>
 8003052:	2b16      	cmp	r3, #22
 8003054:	d101      	bne.n	800305a <__sflush_r+0xb6>
 8003056:	602f      	str	r7, [r5, #0]
 8003058:	e7b1      	b.n	8002fbe <__sflush_r+0x1a>
 800305a:	89a3      	ldrh	r3, [r4, #12]
 800305c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003060:	81a3      	strh	r3, [r4, #12]
 8003062:	e7ad      	b.n	8002fc0 <__sflush_r+0x1c>
 8003064:	690f      	ldr	r7, [r1, #16]
 8003066:	2f00      	cmp	r7, #0
 8003068:	d0a9      	beq.n	8002fbe <__sflush_r+0x1a>
 800306a:	0793      	lsls	r3, r2, #30
 800306c:	680e      	ldr	r6, [r1, #0]
 800306e:	bf08      	it	eq
 8003070:	694b      	ldreq	r3, [r1, #20]
 8003072:	600f      	str	r7, [r1, #0]
 8003074:	bf18      	it	ne
 8003076:	2300      	movne	r3, #0
 8003078:	eba6 0807 	sub.w	r8, r6, r7
 800307c:	608b      	str	r3, [r1, #8]
 800307e:	f1b8 0f00 	cmp.w	r8, #0
 8003082:	dd9c      	ble.n	8002fbe <__sflush_r+0x1a>
 8003084:	6a21      	ldr	r1, [r4, #32]
 8003086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003088:	4643      	mov	r3, r8
 800308a:	463a      	mov	r2, r7
 800308c:	4628      	mov	r0, r5
 800308e:	47b0      	blx	r6
 8003090:	2800      	cmp	r0, #0
 8003092:	dc06      	bgt.n	80030a2 <__sflush_r+0xfe>
 8003094:	89a3      	ldrh	r3, [r4, #12]
 8003096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800309a:	81a3      	strh	r3, [r4, #12]
 800309c:	f04f 30ff 	mov.w	r0, #4294967295
 80030a0:	e78e      	b.n	8002fc0 <__sflush_r+0x1c>
 80030a2:	4407      	add	r7, r0
 80030a4:	eba8 0800 	sub.w	r8, r8, r0
 80030a8:	e7e9      	b.n	800307e <__sflush_r+0xda>
 80030aa:	bf00      	nop
 80030ac:	20400001 	.word	0x20400001

080030b0 <_fflush_r>:
 80030b0:	b538      	push	{r3, r4, r5, lr}
 80030b2:	690b      	ldr	r3, [r1, #16]
 80030b4:	4605      	mov	r5, r0
 80030b6:	460c      	mov	r4, r1
 80030b8:	b913      	cbnz	r3, 80030c0 <_fflush_r+0x10>
 80030ba:	2500      	movs	r5, #0
 80030bc:	4628      	mov	r0, r5
 80030be:	bd38      	pop	{r3, r4, r5, pc}
 80030c0:	b118      	cbz	r0, 80030ca <_fflush_r+0x1a>
 80030c2:	6983      	ldr	r3, [r0, #24]
 80030c4:	b90b      	cbnz	r3, 80030ca <_fflush_r+0x1a>
 80030c6:	f000 f887 	bl	80031d8 <__sinit>
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <_fflush_r+0x6c>)
 80030cc:	429c      	cmp	r4, r3
 80030ce:	d11b      	bne.n	8003108 <_fflush_r+0x58>
 80030d0:	686c      	ldr	r4, [r5, #4]
 80030d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0ef      	beq.n	80030ba <_fflush_r+0xa>
 80030da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80030dc:	07d0      	lsls	r0, r2, #31
 80030de:	d404      	bmi.n	80030ea <_fflush_r+0x3a>
 80030e0:	0599      	lsls	r1, r3, #22
 80030e2:	d402      	bmi.n	80030ea <_fflush_r+0x3a>
 80030e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030e6:	f000 f915 	bl	8003314 <__retarget_lock_acquire_recursive>
 80030ea:	4628      	mov	r0, r5
 80030ec:	4621      	mov	r1, r4
 80030ee:	f7ff ff59 	bl	8002fa4 <__sflush_r>
 80030f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030f4:	07da      	lsls	r2, r3, #31
 80030f6:	4605      	mov	r5, r0
 80030f8:	d4e0      	bmi.n	80030bc <_fflush_r+0xc>
 80030fa:	89a3      	ldrh	r3, [r4, #12]
 80030fc:	059b      	lsls	r3, r3, #22
 80030fe:	d4dd      	bmi.n	80030bc <_fflush_r+0xc>
 8003100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003102:	f000 f908 	bl	8003316 <__retarget_lock_release_recursive>
 8003106:	e7d9      	b.n	80030bc <_fflush_r+0xc>
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <_fflush_r+0x70>)
 800310a:	429c      	cmp	r4, r3
 800310c:	d101      	bne.n	8003112 <_fflush_r+0x62>
 800310e:	68ac      	ldr	r4, [r5, #8]
 8003110:	e7df      	b.n	80030d2 <_fflush_r+0x22>
 8003112:	4b04      	ldr	r3, [pc, #16]	; (8003124 <_fflush_r+0x74>)
 8003114:	429c      	cmp	r4, r3
 8003116:	bf08      	it	eq
 8003118:	68ec      	ldreq	r4, [r5, #12]
 800311a:	e7da      	b.n	80030d2 <_fflush_r+0x22>
 800311c:	0800381c 	.word	0x0800381c
 8003120:	0800383c 	.word	0x0800383c
 8003124:	080037fc 	.word	0x080037fc

08003128 <std>:
 8003128:	2300      	movs	r3, #0
 800312a:	b510      	push	{r4, lr}
 800312c:	4604      	mov	r4, r0
 800312e:	e9c0 3300 	strd	r3, r3, [r0]
 8003132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003136:	6083      	str	r3, [r0, #8]
 8003138:	8181      	strh	r1, [r0, #12]
 800313a:	6643      	str	r3, [r0, #100]	; 0x64
 800313c:	81c2      	strh	r2, [r0, #14]
 800313e:	6183      	str	r3, [r0, #24]
 8003140:	4619      	mov	r1, r3
 8003142:	2208      	movs	r2, #8
 8003144:	305c      	adds	r0, #92	; 0x5c
 8003146:	f7ff fdef 	bl	8002d28 <memset>
 800314a:	4b05      	ldr	r3, [pc, #20]	; (8003160 <std+0x38>)
 800314c:	6263      	str	r3, [r4, #36]	; 0x24
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <std+0x3c>)
 8003150:	62a3      	str	r3, [r4, #40]	; 0x28
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <std+0x40>)
 8003154:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <std+0x44>)
 8003158:	6224      	str	r4, [r4, #32]
 800315a:	6323      	str	r3, [r4, #48]	; 0x30
 800315c:	bd10      	pop	{r4, pc}
 800315e:	bf00      	nop
 8003160:	080035c5 	.word	0x080035c5
 8003164:	080035e7 	.word	0x080035e7
 8003168:	0800361f 	.word	0x0800361f
 800316c:	08003643 	.word	0x08003643

08003170 <_cleanup_r>:
 8003170:	4901      	ldr	r1, [pc, #4]	; (8003178 <_cleanup_r+0x8>)
 8003172:	f000 b8af 	b.w	80032d4 <_fwalk_reent>
 8003176:	bf00      	nop
 8003178:	080030b1 	.word	0x080030b1

0800317c <__sfmoreglue>:
 800317c:	b570      	push	{r4, r5, r6, lr}
 800317e:	2268      	movs	r2, #104	; 0x68
 8003180:	1e4d      	subs	r5, r1, #1
 8003182:	4355      	muls	r5, r2
 8003184:	460e      	mov	r6, r1
 8003186:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800318a:	f000 f997 	bl	80034bc <_malloc_r>
 800318e:	4604      	mov	r4, r0
 8003190:	b140      	cbz	r0, 80031a4 <__sfmoreglue+0x28>
 8003192:	2100      	movs	r1, #0
 8003194:	e9c0 1600 	strd	r1, r6, [r0]
 8003198:	300c      	adds	r0, #12
 800319a:	60a0      	str	r0, [r4, #8]
 800319c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80031a0:	f7ff fdc2 	bl	8002d28 <memset>
 80031a4:	4620      	mov	r0, r4
 80031a6:	bd70      	pop	{r4, r5, r6, pc}

080031a8 <__sfp_lock_acquire>:
 80031a8:	4801      	ldr	r0, [pc, #4]	; (80031b0 <__sfp_lock_acquire+0x8>)
 80031aa:	f000 b8b3 	b.w	8003314 <__retarget_lock_acquire_recursive>
 80031ae:	bf00      	nop
 80031b0:	200000f1 	.word	0x200000f1

080031b4 <__sfp_lock_release>:
 80031b4:	4801      	ldr	r0, [pc, #4]	; (80031bc <__sfp_lock_release+0x8>)
 80031b6:	f000 b8ae 	b.w	8003316 <__retarget_lock_release_recursive>
 80031ba:	bf00      	nop
 80031bc:	200000f1 	.word	0x200000f1

080031c0 <__sinit_lock_acquire>:
 80031c0:	4801      	ldr	r0, [pc, #4]	; (80031c8 <__sinit_lock_acquire+0x8>)
 80031c2:	f000 b8a7 	b.w	8003314 <__retarget_lock_acquire_recursive>
 80031c6:	bf00      	nop
 80031c8:	200000f2 	.word	0x200000f2

080031cc <__sinit_lock_release>:
 80031cc:	4801      	ldr	r0, [pc, #4]	; (80031d4 <__sinit_lock_release+0x8>)
 80031ce:	f000 b8a2 	b.w	8003316 <__retarget_lock_release_recursive>
 80031d2:	bf00      	nop
 80031d4:	200000f2 	.word	0x200000f2

080031d8 <__sinit>:
 80031d8:	b510      	push	{r4, lr}
 80031da:	4604      	mov	r4, r0
 80031dc:	f7ff fff0 	bl	80031c0 <__sinit_lock_acquire>
 80031e0:	69a3      	ldr	r3, [r4, #24]
 80031e2:	b11b      	cbz	r3, 80031ec <__sinit+0x14>
 80031e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031e8:	f7ff bff0 	b.w	80031cc <__sinit_lock_release>
 80031ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80031f0:	6523      	str	r3, [r4, #80]	; 0x50
 80031f2:	4b13      	ldr	r3, [pc, #76]	; (8003240 <__sinit+0x68>)
 80031f4:	4a13      	ldr	r2, [pc, #76]	; (8003244 <__sinit+0x6c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80031fa:	42a3      	cmp	r3, r4
 80031fc:	bf04      	itt	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	61a3      	streq	r3, [r4, #24]
 8003202:	4620      	mov	r0, r4
 8003204:	f000 f820 	bl	8003248 <__sfp>
 8003208:	6060      	str	r0, [r4, #4]
 800320a:	4620      	mov	r0, r4
 800320c:	f000 f81c 	bl	8003248 <__sfp>
 8003210:	60a0      	str	r0, [r4, #8]
 8003212:	4620      	mov	r0, r4
 8003214:	f000 f818 	bl	8003248 <__sfp>
 8003218:	2200      	movs	r2, #0
 800321a:	60e0      	str	r0, [r4, #12]
 800321c:	2104      	movs	r1, #4
 800321e:	6860      	ldr	r0, [r4, #4]
 8003220:	f7ff ff82 	bl	8003128 <std>
 8003224:	68a0      	ldr	r0, [r4, #8]
 8003226:	2201      	movs	r2, #1
 8003228:	2109      	movs	r1, #9
 800322a:	f7ff ff7d 	bl	8003128 <std>
 800322e:	68e0      	ldr	r0, [r4, #12]
 8003230:	2202      	movs	r2, #2
 8003232:	2112      	movs	r1, #18
 8003234:	f7ff ff78 	bl	8003128 <std>
 8003238:	2301      	movs	r3, #1
 800323a:	61a3      	str	r3, [r4, #24]
 800323c:	e7d2      	b.n	80031e4 <__sinit+0xc>
 800323e:	bf00      	nop
 8003240:	080037f8 	.word	0x080037f8
 8003244:	08003171 	.word	0x08003171

08003248 <__sfp>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	4607      	mov	r7, r0
 800324c:	f7ff ffac 	bl	80031a8 <__sfp_lock_acquire>
 8003250:	4b1e      	ldr	r3, [pc, #120]	; (80032cc <__sfp+0x84>)
 8003252:	681e      	ldr	r6, [r3, #0]
 8003254:	69b3      	ldr	r3, [r6, #24]
 8003256:	b913      	cbnz	r3, 800325e <__sfp+0x16>
 8003258:	4630      	mov	r0, r6
 800325a:	f7ff ffbd 	bl	80031d8 <__sinit>
 800325e:	3648      	adds	r6, #72	; 0x48
 8003260:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003264:	3b01      	subs	r3, #1
 8003266:	d503      	bpl.n	8003270 <__sfp+0x28>
 8003268:	6833      	ldr	r3, [r6, #0]
 800326a:	b30b      	cbz	r3, 80032b0 <__sfp+0x68>
 800326c:	6836      	ldr	r6, [r6, #0]
 800326e:	e7f7      	b.n	8003260 <__sfp+0x18>
 8003270:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003274:	b9d5      	cbnz	r5, 80032ac <__sfp+0x64>
 8003276:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <__sfp+0x88>)
 8003278:	60e3      	str	r3, [r4, #12]
 800327a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800327e:	6665      	str	r5, [r4, #100]	; 0x64
 8003280:	f000 f847 	bl	8003312 <__retarget_lock_init_recursive>
 8003284:	f7ff ff96 	bl	80031b4 <__sfp_lock_release>
 8003288:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800328c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003290:	6025      	str	r5, [r4, #0]
 8003292:	61a5      	str	r5, [r4, #24]
 8003294:	2208      	movs	r2, #8
 8003296:	4629      	mov	r1, r5
 8003298:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800329c:	f7ff fd44 	bl	8002d28 <memset>
 80032a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80032a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80032a8:	4620      	mov	r0, r4
 80032aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032ac:	3468      	adds	r4, #104	; 0x68
 80032ae:	e7d9      	b.n	8003264 <__sfp+0x1c>
 80032b0:	2104      	movs	r1, #4
 80032b2:	4638      	mov	r0, r7
 80032b4:	f7ff ff62 	bl	800317c <__sfmoreglue>
 80032b8:	4604      	mov	r4, r0
 80032ba:	6030      	str	r0, [r6, #0]
 80032bc:	2800      	cmp	r0, #0
 80032be:	d1d5      	bne.n	800326c <__sfp+0x24>
 80032c0:	f7ff ff78 	bl	80031b4 <__sfp_lock_release>
 80032c4:	230c      	movs	r3, #12
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	e7ee      	b.n	80032a8 <__sfp+0x60>
 80032ca:	bf00      	nop
 80032cc:	080037f8 	.word	0x080037f8
 80032d0:	ffff0001 	.word	0xffff0001

080032d4 <_fwalk_reent>:
 80032d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032d8:	4606      	mov	r6, r0
 80032da:	4688      	mov	r8, r1
 80032dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80032e0:	2700      	movs	r7, #0
 80032e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032e6:	f1b9 0901 	subs.w	r9, r9, #1
 80032ea:	d505      	bpl.n	80032f8 <_fwalk_reent+0x24>
 80032ec:	6824      	ldr	r4, [r4, #0]
 80032ee:	2c00      	cmp	r4, #0
 80032f0:	d1f7      	bne.n	80032e2 <_fwalk_reent+0xe>
 80032f2:	4638      	mov	r0, r7
 80032f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032f8:	89ab      	ldrh	r3, [r5, #12]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d907      	bls.n	800330e <_fwalk_reent+0x3a>
 80032fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003302:	3301      	adds	r3, #1
 8003304:	d003      	beq.n	800330e <_fwalk_reent+0x3a>
 8003306:	4629      	mov	r1, r5
 8003308:	4630      	mov	r0, r6
 800330a:	47c0      	blx	r8
 800330c:	4307      	orrs	r7, r0
 800330e:	3568      	adds	r5, #104	; 0x68
 8003310:	e7e9      	b.n	80032e6 <_fwalk_reent+0x12>

08003312 <__retarget_lock_init_recursive>:
 8003312:	4770      	bx	lr

08003314 <__retarget_lock_acquire_recursive>:
 8003314:	4770      	bx	lr

08003316 <__retarget_lock_release_recursive>:
 8003316:	4770      	bx	lr

08003318 <__swhatbuf_r>:
 8003318:	b570      	push	{r4, r5, r6, lr}
 800331a:	460e      	mov	r6, r1
 800331c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003320:	2900      	cmp	r1, #0
 8003322:	b096      	sub	sp, #88	; 0x58
 8003324:	4614      	mov	r4, r2
 8003326:	461d      	mov	r5, r3
 8003328:	da08      	bge.n	800333c <__swhatbuf_r+0x24>
 800332a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	602a      	str	r2, [r5, #0]
 8003332:	061a      	lsls	r2, r3, #24
 8003334:	d410      	bmi.n	8003358 <__swhatbuf_r+0x40>
 8003336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800333a:	e00e      	b.n	800335a <__swhatbuf_r+0x42>
 800333c:	466a      	mov	r2, sp
 800333e:	f000 f9a7 	bl	8003690 <_fstat_r>
 8003342:	2800      	cmp	r0, #0
 8003344:	dbf1      	blt.n	800332a <__swhatbuf_r+0x12>
 8003346:	9a01      	ldr	r2, [sp, #4]
 8003348:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800334c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003350:	425a      	negs	r2, r3
 8003352:	415a      	adcs	r2, r3
 8003354:	602a      	str	r2, [r5, #0]
 8003356:	e7ee      	b.n	8003336 <__swhatbuf_r+0x1e>
 8003358:	2340      	movs	r3, #64	; 0x40
 800335a:	2000      	movs	r0, #0
 800335c:	6023      	str	r3, [r4, #0]
 800335e:	b016      	add	sp, #88	; 0x58
 8003360:	bd70      	pop	{r4, r5, r6, pc}
	...

08003364 <__smakebuf_r>:
 8003364:	898b      	ldrh	r3, [r1, #12]
 8003366:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003368:	079d      	lsls	r5, r3, #30
 800336a:	4606      	mov	r6, r0
 800336c:	460c      	mov	r4, r1
 800336e:	d507      	bpl.n	8003380 <__smakebuf_r+0x1c>
 8003370:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003374:	6023      	str	r3, [r4, #0]
 8003376:	6123      	str	r3, [r4, #16]
 8003378:	2301      	movs	r3, #1
 800337a:	6163      	str	r3, [r4, #20]
 800337c:	b002      	add	sp, #8
 800337e:	bd70      	pop	{r4, r5, r6, pc}
 8003380:	ab01      	add	r3, sp, #4
 8003382:	466a      	mov	r2, sp
 8003384:	f7ff ffc8 	bl	8003318 <__swhatbuf_r>
 8003388:	9900      	ldr	r1, [sp, #0]
 800338a:	4605      	mov	r5, r0
 800338c:	4630      	mov	r0, r6
 800338e:	f000 f895 	bl	80034bc <_malloc_r>
 8003392:	b948      	cbnz	r0, 80033a8 <__smakebuf_r+0x44>
 8003394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003398:	059a      	lsls	r2, r3, #22
 800339a:	d4ef      	bmi.n	800337c <__smakebuf_r+0x18>
 800339c:	f023 0303 	bic.w	r3, r3, #3
 80033a0:	f043 0302 	orr.w	r3, r3, #2
 80033a4:	81a3      	strh	r3, [r4, #12]
 80033a6:	e7e3      	b.n	8003370 <__smakebuf_r+0xc>
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <__smakebuf_r+0x7c>)
 80033aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80033ac:	89a3      	ldrh	r3, [r4, #12]
 80033ae:	6020      	str	r0, [r4, #0]
 80033b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b4:	81a3      	strh	r3, [r4, #12]
 80033b6:	9b00      	ldr	r3, [sp, #0]
 80033b8:	6163      	str	r3, [r4, #20]
 80033ba:	9b01      	ldr	r3, [sp, #4]
 80033bc:	6120      	str	r0, [r4, #16]
 80033be:	b15b      	cbz	r3, 80033d8 <__smakebuf_r+0x74>
 80033c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033c4:	4630      	mov	r0, r6
 80033c6:	f000 f975 	bl	80036b4 <_isatty_r>
 80033ca:	b128      	cbz	r0, 80033d8 <__smakebuf_r+0x74>
 80033cc:	89a3      	ldrh	r3, [r4, #12]
 80033ce:	f023 0303 	bic.w	r3, r3, #3
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	81a3      	strh	r3, [r4, #12]
 80033d8:	89a0      	ldrh	r0, [r4, #12]
 80033da:	4305      	orrs	r5, r0
 80033dc:	81a5      	strh	r5, [r4, #12]
 80033de:	e7cd      	b.n	800337c <__smakebuf_r+0x18>
 80033e0:	08003171 	.word	0x08003171

080033e4 <_free_r>:
 80033e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033e6:	2900      	cmp	r1, #0
 80033e8:	d044      	beq.n	8003474 <_free_r+0x90>
 80033ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033ee:	9001      	str	r0, [sp, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f1a1 0404 	sub.w	r4, r1, #4
 80033f6:	bfb8      	it	lt
 80033f8:	18e4      	addlt	r4, r4, r3
 80033fa:	f000 f97d 	bl	80036f8 <__malloc_lock>
 80033fe:	4a1e      	ldr	r2, [pc, #120]	; (8003478 <_free_r+0x94>)
 8003400:	9801      	ldr	r0, [sp, #4]
 8003402:	6813      	ldr	r3, [r2, #0]
 8003404:	b933      	cbnz	r3, 8003414 <_free_r+0x30>
 8003406:	6063      	str	r3, [r4, #4]
 8003408:	6014      	str	r4, [r2, #0]
 800340a:	b003      	add	sp, #12
 800340c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003410:	f000 b978 	b.w	8003704 <__malloc_unlock>
 8003414:	42a3      	cmp	r3, r4
 8003416:	d908      	bls.n	800342a <_free_r+0x46>
 8003418:	6825      	ldr	r5, [r4, #0]
 800341a:	1961      	adds	r1, r4, r5
 800341c:	428b      	cmp	r3, r1
 800341e:	bf01      	itttt	eq
 8003420:	6819      	ldreq	r1, [r3, #0]
 8003422:	685b      	ldreq	r3, [r3, #4]
 8003424:	1949      	addeq	r1, r1, r5
 8003426:	6021      	streq	r1, [r4, #0]
 8003428:	e7ed      	b.n	8003406 <_free_r+0x22>
 800342a:	461a      	mov	r2, r3
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	b10b      	cbz	r3, 8003434 <_free_r+0x50>
 8003430:	42a3      	cmp	r3, r4
 8003432:	d9fa      	bls.n	800342a <_free_r+0x46>
 8003434:	6811      	ldr	r1, [r2, #0]
 8003436:	1855      	adds	r5, r2, r1
 8003438:	42a5      	cmp	r5, r4
 800343a:	d10b      	bne.n	8003454 <_free_r+0x70>
 800343c:	6824      	ldr	r4, [r4, #0]
 800343e:	4421      	add	r1, r4
 8003440:	1854      	adds	r4, r2, r1
 8003442:	42a3      	cmp	r3, r4
 8003444:	6011      	str	r1, [r2, #0]
 8003446:	d1e0      	bne.n	800340a <_free_r+0x26>
 8003448:	681c      	ldr	r4, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	6053      	str	r3, [r2, #4]
 800344e:	4421      	add	r1, r4
 8003450:	6011      	str	r1, [r2, #0]
 8003452:	e7da      	b.n	800340a <_free_r+0x26>
 8003454:	d902      	bls.n	800345c <_free_r+0x78>
 8003456:	230c      	movs	r3, #12
 8003458:	6003      	str	r3, [r0, #0]
 800345a:	e7d6      	b.n	800340a <_free_r+0x26>
 800345c:	6825      	ldr	r5, [r4, #0]
 800345e:	1961      	adds	r1, r4, r5
 8003460:	428b      	cmp	r3, r1
 8003462:	bf04      	itt	eq
 8003464:	6819      	ldreq	r1, [r3, #0]
 8003466:	685b      	ldreq	r3, [r3, #4]
 8003468:	6063      	str	r3, [r4, #4]
 800346a:	bf04      	itt	eq
 800346c:	1949      	addeq	r1, r1, r5
 800346e:	6021      	streq	r1, [r4, #0]
 8003470:	6054      	str	r4, [r2, #4]
 8003472:	e7ca      	b.n	800340a <_free_r+0x26>
 8003474:	b003      	add	sp, #12
 8003476:	bd30      	pop	{r4, r5, pc}
 8003478:	200000f4 	.word	0x200000f4

0800347c <sbrk_aligned>:
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	4e0e      	ldr	r6, [pc, #56]	; (80034b8 <sbrk_aligned+0x3c>)
 8003480:	460c      	mov	r4, r1
 8003482:	6831      	ldr	r1, [r6, #0]
 8003484:	4605      	mov	r5, r0
 8003486:	b911      	cbnz	r1, 800348e <sbrk_aligned+0x12>
 8003488:	f000 f88c 	bl	80035a4 <_sbrk_r>
 800348c:	6030      	str	r0, [r6, #0]
 800348e:	4621      	mov	r1, r4
 8003490:	4628      	mov	r0, r5
 8003492:	f000 f887 	bl	80035a4 <_sbrk_r>
 8003496:	1c43      	adds	r3, r0, #1
 8003498:	d00a      	beq.n	80034b0 <sbrk_aligned+0x34>
 800349a:	1cc4      	adds	r4, r0, #3
 800349c:	f024 0403 	bic.w	r4, r4, #3
 80034a0:	42a0      	cmp	r0, r4
 80034a2:	d007      	beq.n	80034b4 <sbrk_aligned+0x38>
 80034a4:	1a21      	subs	r1, r4, r0
 80034a6:	4628      	mov	r0, r5
 80034a8:	f000 f87c 	bl	80035a4 <_sbrk_r>
 80034ac:	3001      	adds	r0, #1
 80034ae:	d101      	bne.n	80034b4 <sbrk_aligned+0x38>
 80034b0:	f04f 34ff 	mov.w	r4, #4294967295
 80034b4:	4620      	mov	r0, r4
 80034b6:	bd70      	pop	{r4, r5, r6, pc}
 80034b8:	200000f8 	.word	0x200000f8

080034bc <_malloc_r>:
 80034bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034c0:	1ccd      	adds	r5, r1, #3
 80034c2:	f025 0503 	bic.w	r5, r5, #3
 80034c6:	3508      	adds	r5, #8
 80034c8:	2d0c      	cmp	r5, #12
 80034ca:	bf38      	it	cc
 80034cc:	250c      	movcc	r5, #12
 80034ce:	2d00      	cmp	r5, #0
 80034d0:	4607      	mov	r7, r0
 80034d2:	db01      	blt.n	80034d8 <_malloc_r+0x1c>
 80034d4:	42a9      	cmp	r1, r5
 80034d6:	d905      	bls.n	80034e4 <_malloc_r+0x28>
 80034d8:	230c      	movs	r3, #12
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	2600      	movs	r6, #0
 80034de:	4630      	mov	r0, r6
 80034e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034e4:	4e2e      	ldr	r6, [pc, #184]	; (80035a0 <_malloc_r+0xe4>)
 80034e6:	f000 f907 	bl	80036f8 <__malloc_lock>
 80034ea:	6833      	ldr	r3, [r6, #0]
 80034ec:	461c      	mov	r4, r3
 80034ee:	bb34      	cbnz	r4, 800353e <_malloc_r+0x82>
 80034f0:	4629      	mov	r1, r5
 80034f2:	4638      	mov	r0, r7
 80034f4:	f7ff ffc2 	bl	800347c <sbrk_aligned>
 80034f8:	1c43      	adds	r3, r0, #1
 80034fa:	4604      	mov	r4, r0
 80034fc:	d14d      	bne.n	800359a <_malloc_r+0xde>
 80034fe:	6834      	ldr	r4, [r6, #0]
 8003500:	4626      	mov	r6, r4
 8003502:	2e00      	cmp	r6, #0
 8003504:	d140      	bne.n	8003588 <_malloc_r+0xcc>
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	4631      	mov	r1, r6
 800350a:	4638      	mov	r0, r7
 800350c:	eb04 0803 	add.w	r8, r4, r3
 8003510:	f000 f848 	bl	80035a4 <_sbrk_r>
 8003514:	4580      	cmp	r8, r0
 8003516:	d13a      	bne.n	800358e <_malloc_r+0xd2>
 8003518:	6821      	ldr	r1, [r4, #0]
 800351a:	3503      	adds	r5, #3
 800351c:	1a6d      	subs	r5, r5, r1
 800351e:	f025 0503 	bic.w	r5, r5, #3
 8003522:	3508      	adds	r5, #8
 8003524:	2d0c      	cmp	r5, #12
 8003526:	bf38      	it	cc
 8003528:	250c      	movcc	r5, #12
 800352a:	4629      	mov	r1, r5
 800352c:	4638      	mov	r0, r7
 800352e:	f7ff ffa5 	bl	800347c <sbrk_aligned>
 8003532:	3001      	adds	r0, #1
 8003534:	d02b      	beq.n	800358e <_malloc_r+0xd2>
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	442b      	add	r3, r5
 800353a:	6023      	str	r3, [r4, #0]
 800353c:	e00e      	b.n	800355c <_malloc_r+0xa0>
 800353e:	6822      	ldr	r2, [r4, #0]
 8003540:	1b52      	subs	r2, r2, r5
 8003542:	d41e      	bmi.n	8003582 <_malloc_r+0xc6>
 8003544:	2a0b      	cmp	r2, #11
 8003546:	d916      	bls.n	8003576 <_malloc_r+0xba>
 8003548:	1961      	adds	r1, r4, r5
 800354a:	42a3      	cmp	r3, r4
 800354c:	6025      	str	r5, [r4, #0]
 800354e:	bf18      	it	ne
 8003550:	6059      	strne	r1, [r3, #4]
 8003552:	6863      	ldr	r3, [r4, #4]
 8003554:	bf08      	it	eq
 8003556:	6031      	streq	r1, [r6, #0]
 8003558:	5162      	str	r2, [r4, r5]
 800355a:	604b      	str	r3, [r1, #4]
 800355c:	4638      	mov	r0, r7
 800355e:	f104 060b 	add.w	r6, r4, #11
 8003562:	f000 f8cf 	bl	8003704 <__malloc_unlock>
 8003566:	f026 0607 	bic.w	r6, r6, #7
 800356a:	1d23      	adds	r3, r4, #4
 800356c:	1af2      	subs	r2, r6, r3
 800356e:	d0b6      	beq.n	80034de <_malloc_r+0x22>
 8003570:	1b9b      	subs	r3, r3, r6
 8003572:	50a3      	str	r3, [r4, r2]
 8003574:	e7b3      	b.n	80034de <_malloc_r+0x22>
 8003576:	6862      	ldr	r2, [r4, #4]
 8003578:	42a3      	cmp	r3, r4
 800357a:	bf0c      	ite	eq
 800357c:	6032      	streq	r2, [r6, #0]
 800357e:	605a      	strne	r2, [r3, #4]
 8003580:	e7ec      	b.n	800355c <_malloc_r+0xa0>
 8003582:	4623      	mov	r3, r4
 8003584:	6864      	ldr	r4, [r4, #4]
 8003586:	e7b2      	b.n	80034ee <_malloc_r+0x32>
 8003588:	4634      	mov	r4, r6
 800358a:	6876      	ldr	r6, [r6, #4]
 800358c:	e7b9      	b.n	8003502 <_malloc_r+0x46>
 800358e:	230c      	movs	r3, #12
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	4638      	mov	r0, r7
 8003594:	f000 f8b6 	bl	8003704 <__malloc_unlock>
 8003598:	e7a1      	b.n	80034de <_malloc_r+0x22>
 800359a:	6025      	str	r5, [r4, #0]
 800359c:	e7de      	b.n	800355c <_malloc_r+0xa0>
 800359e:	bf00      	nop
 80035a0:	200000f4 	.word	0x200000f4

080035a4 <_sbrk_r>:
 80035a4:	b538      	push	{r3, r4, r5, lr}
 80035a6:	4d06      	ldr	r5, [pc, #24]	; (80035c0 <_sbrk_r+0x1c>)
 80035a8:	2300      	movs	r3, #0
 80035aa:	4604      	mov	r4, r0
 80035ac:	4608      	mov	r0, r1
 80035ae:	602b      	str	r3, [r5, #0]
 80035b0:	f7fd faaa 	bl	8000b08 <_sbrk>
 80035b4:	1c43      	adds	r3, r0, #1
 80035b6:	d102      	bne.n	80035be <_sbrk_r+0x1a>
 80035b8:	682b      	ldr	r3, [r5, #0]
 80035ba:	b103      	cbz	r3, 80035be <_sbrk_r+0x1a>
 80035bc:	6023      	str	r3, [r4, #0]
 80035be:	bd38      	pop	{r3, r4, r5, pc}
 80035c0:	200000fc 	.word	0x200000fc

080035c4 <__sread>:
 80035c4:	b510      	push	{r4, lr}
 80035c6:	460c      	mov	r4, r1
 80035c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035cc:	f000 f8a0 	bl	8003710 <_read_r>
 80035d0:	2800      	cmp	r0, #0
 80035d2:	bfab      	itete	ge
 80035d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80035d6:	89a3      	ldrhlt	r3, [r4, #12]
 80035d8:	181b      	addge	r3, r3, r0
 80035da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80035de:	bfac      	ite	ge
 80035e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80035e2:	81a3      	strhlt	r3, [r4, #12]
 80035e4:	bd10      	pop	{r4, pc}

080035e6 <__swrite>:
 80035e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ea:	461f      	mov	r7, r3
 80035ec:	898b      	ldrh	r3, [r1, #12]
 80035ee:	05db      	lsls	r3, r3, #23
 80035f0:	4605      	mov	r5, r0
 80035f2:	460c      	mov	r4, r1
 80035f4:	4616      	mov	r6, r2
 80035f6:	d505      	bpl.n	8003604 <__swrite+0x1e>
 80035f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035fc:	2302      	movs	r3, #2
 80035fe:	2200      	movs	r2, #0
 8003600:	f000 f868 	bl	80036d4 <_lseek_r>
 8003604:	89a3      	ldrh	r3, [r4, #12]
 8003606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800360a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800360e:	81a3      	strh	r3, [r4, #12]
 8003610:	4632      	mov	r2, r6
 8003612:	463b      	mov	r3, r7
 8003614:	4628      	mov	r0, r5
 8003616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800361a:	f000 b817 	b.w	800364c <_write_r>

0800361e <__sseek>:
 800361e:	b510      	push	{r4, lr}
 8003620:	460c      	mov	r4, r1
 8003622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003626:	f000 f855 	bl	80036d4 <_lseek_r>
 800362a:	1c43      	adds	r3, r0, #1
 800362c:	89a3      	ldrh	r3, [r4, #12]
 800362e:	bf15      	itete	ne
 8003630:	6560      	strne	r0, [r4, #84]	; 0x54
 8003632:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003636:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800363a:	81a3      	strheq	r3, [r4, #12]
 800363c:	bf18      	it	ne
 800363e:	81a3      	strhne	r3, [r4, #12]
 8003640:	bd10      	pop	{r4, pc}

08003642 <__sclose>:
 8003642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003646:	f000 b813 	b.w	8003670 <_close_r>
	...

0800364c <_write_r>:
 800364c:	b538      	push	{r3, r4, r5, lr}
 800364e:	4d07      	ldr	r5, [pc, #28]	; (800366c <_write_r+0x20>)
 8003650:	4604      	mov	r4, r0
 8003652:	4608      	mov	r0, r1
 8003654:	4611      	mov	r1, r2
 8003656:	2200      	movs	r2, #0
 8003658:	602a      	str	r2, [r5, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	f7fd f920 	bl	80008a0 <_write>
 8003660:	1c43      	adds	r3, r0, #1
 8003662:	d102      	bne.n	800366a <_write_r+0x1e>
 8003664:	682b      	ldr	r3, [r5, #0]
 8003666:	b103      	cbz	r3, 800366a <_write_r+0x1e>
 8003668:	6023      	str	r3, [r4, #0]
 800366a:	bd38      	pop	{r3, r4, r5, pc}
 800366c:	200000fc 	.word	0x200000fc

08003670 <_close_r>:
 8003670:	b538      	push	{r3, r4, r5, lr}
 8003672:	4d06      	ldr	r5, [pc, #24]	; (800368c <_close_r+0x1c>)
 8003674:	2300      	movs	r3, #0
 8003676:	4604      	mov	r4, r0
 8003678:	4608      	mov	r0, r1
 800367a:	602b      	str	r3, [r5, #0]
 800367c:	f7fd fa0f 	bl	8000a9e <_close>
 8003680:	1c43      	adds	r3, r0, #1
 8003682:	d102      	bne.n	800368a <_close_r+0x1a>
 8003684:	682b      	ldr	r3, [r5, #0]
 8003686:	b103      	cbz	r3, 800368a <_close_r+0x1a>
 8003688:	6023      	str	r3, [r4, #0]
 800368a:	bd38      	pop	{r3, r4, r5, pc}
 800368c:	200000fc 	.word	0x200000fc

08003690 <_fstat_r>:
 8003690:	b538      	push	{r3, r4, r5, lr}
 8003692:	4d07      	ldr	r5, [pc, #28]	; (80036b0 <_fstat_r+0x20>)
 8003694:	2300      	movs	r3, #0
 8003696:	4604      	mov	r4, r0
 8003698:	4608      	mov	r0, r1
 800369a:	4611      	mov	r1, r2
 800369c:	602b      	str	r3, [r5, #0]
 800369e:	f7fd fa0a 	bl	8000ab6 <_fstat>
 80036a2:	1c43      	adds	r3, r0, #1
 80036a4:	d102      	bne.n	80036ac <_fstat_r+0x1c>
 80036a6:	682b      	ldr	r3, [r5, #0]
 80036a8:	b103      	cbz	r3, 80036ac <_fstat_r+0x1c>
 80036aa:	6023      	str	r3, [r4, #0]
 80036ac:	bd38      	pop	{r3, r4, r5, pc}
 80036ae:	bf00      	nop
 80036b0:	200000fc 	.word	0x200000fc

080036b4 <_isatty_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	4d06      	ldr	r5, [pc, #24]	; (80036d0 <_isatty_r+0x1c>)
 80036b8:	2300      	movs	r3, #0
 80036ba:	4604      	mov	r4, r0
 80036bc:	4608      	mov	r0, r1
 80036be:	602b      	str	r3, [r5, #0]
 80036c0:	f7fd fa09 	bl	8000ad6 <_isatty>
 80036c4:	1c43      	adds	r3, r0, #1
 80036c6:	d102      	bne.n	80036ce <_isatty_r+0x1a>
 80036c8:	682b      	ldr	r3, [r5, #0]
 80036ca:	b103      	cbz	r3, 80036ce <_isatty_r+0x1a>
 80036cc:	6023      	str	r3, [r4, #0]
 80036ce:	bd38      	pop	{r3, r4, r5, pc}
 80036d0:	200000fc 	.word	0x200000fc

080036d4 <_lseek_r>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	4d07      	ldr	r5, [pc, #28]	; (80036f4 <_lseek_r+0x20>)
 80036d8:	4604      	mov	r4, r0
 80036da:	4608      	mov	r0, r1
 80036dc:	4611      	mov	r1, r2
 80036de:	2200      	movs	r2, #0
 80036e0:	602a      	str	r2, [r5, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	f7fd fa02 	bl	8000aec <_lseek>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	d102      	bne.n	80036f2 <_lseek_r+0x1e>
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	b103      	cbz	r3, 80036f2 <_lseek_r+0x1e>
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	bd38      	pop	{r3, r4, r5, pc}
 80036f4:	200000fc 	.word	0x200000fc

080036f8 <__malloc_lock>:
 80036f8:	4801      	ldr	r0, [pc, #4]	; (8003700 <__malloc_lock+0x8>)
 80036fa:	f7ff be0b 	b.w	8003314 <__retarget_lock_acquire_recursive>
 80036fe:	bf00      	nop
 8003700:	200000f0 	.word	0x200000f0

08003704 <__malloc_unlock>:
 8003704:	4801      	ldr	r0, [pc, #4]	; (800370c <__malloc_unlock+0x8>)
 8003706:	f7ff be06 	b.w	8003316 <__retarget_lock_release_recursive>
 800370a:	bf00      	nop
 800370c:	200000f0 	.word	0x200000f0

08003710 <_read_r>:
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	4d07      	ldr	r5, [pc, #28]	; (8003730 <_read_r+0x20>)
 8003714:	4604      	mov	r4, r0
 8003716:	4608      	mov	r0, r1
 8003718:	4611      	mov	r1, r2
 800371a:	2200      	movs	r2, #0
 800371c:	602a      	str	r2, [r5, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	f7fd f9a0 	bl	8000a64 <_read>
 8003724:	1c43      	adds	r3, r0, #1
 8003726:	d102      	bne.n	800372e <_read_r+0x1e>
 8003728:	682b      	ldr	r3, [r5, #0]
 800372a:	b103      	cbz	r3, 800372e <_read_r+0x1e>
 800372c:	6023      	str	r3, [r4, #0]
 800372e:	bd38      	pop	{r3, r4, r5, pc}
 8003730:	200000fc 	.word	0x200000fc

08003734 <_init>:
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	bf00      	nop
 8003738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373a:	bc08      	pop	{r3}
 800373c:	469e      	mov	lr, r3
 800373e:	4770      	bx	lr

08003740 <_fini>:
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	bf00      	nop
 8003744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003746:	bc08      	pop	{r3}
 8003748:	469e      	mov	lr, r3
 800374a:	4770      	bx	lr
